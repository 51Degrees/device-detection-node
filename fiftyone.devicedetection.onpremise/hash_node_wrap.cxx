/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifndef SWIG_V8_VERSION
#define SWIG_V8_VERSION 0x031110
#endif


#include <node.h>
//Older version of node.h does not include this
#include <node_version.h>


#include <v8.h>

#if defined(V8_MAJOR_VERSION) && defined(V8_MINOR_VERSION)
#undef SWIG_V8_VERSION
#define SWIG_V8_VERSION (V8_MAJOR_VERSION * 256 + V8_MINOR_VERSION)
#endif

#include <errno.h>
#include <limits.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* ---------------------------------------------------------------------------
 * These typedefs and defines are used to deal with v8 API changes
 *
 * ---------------------------------------------------------------------------*/

// First v8 version that uses "SetWeak" and not "MakeWeak"

#define SWIGV8_SETWEAK_VERSION 0x032224

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031803)
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::New(cstr, len)
#elif (SWIG_V8_VERSION < 0x0706)
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), cstr, v8::String::kNormalString, len)
#else
#define SWIGV8_STRING_NEW2(cstr, len) (v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), cstr, v8::NewStringType::kNormal, len)).ToLocalChecked()
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::Handle<v8::Value> SwigV8ReturnValue;
typedef v8::Arguments SwigV8Arguments;
typedef v8::AccessorInfo SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) return scope.Close(val)
#define SWIGV8_RETURN_INFO(val, info) return scope.Close(val)
#else
typedef void SwigV8ReturnValue;
typedef v8::FunctionCallbackInfo<v8::Value> SwigV8Arguments;
typedef v8::PropertyCallbackInfo<v8::Value> SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) args.GetReturnValue().Set(val); return
#define SWIGV8_RETURN_INFO(val, info) info.GetReturnValue().Set(val); return
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032117)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#else
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::EscapableHandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Escape(val)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_ADJUST_MEMORY(size) v8::V8::AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Context::GetCurrent()
#define SWIGV8_THROW_EXCEPTION(err) v8::ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::New(str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewSymbol(sym)
#elif (SWIG_V8_VERSION < 0x0706)
#define SWIGV8_ADJUST_MEMORY(size) v8::Isolate::GetCurrent()->AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Isolate::GetCurrent()->GetCurrentContext()
#define SWIGV8_THROW_EXCEPTION(err) v8::Isolate::GetCurrent()->ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), str, v8::String::kNormalString)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), sym, v8::String::kNormalString)
#else
#define SWIGV8_ADJUST_MEMORY(size) v8::Isolate::GetCurrent()->AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Isolate::GetCurrent()->GetCurrentContext()
#define SWIGV8_THROW_EXCEPTION(err) v8::Isolate::GetCurrent()->ThrowException(err)
#define SWIGV8_STRING_NEW(str) (v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), str, v8::NewStringType::kNormal)).ToLocalChecked()
#define SWIGV8_SYMBOL_NEW(sym) (v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), sym, v8::NewStringType::kNormal)).ToLocalChecked()
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032318)
#define SWIGV8_ARRAY_NEW() v8::Array::New()
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New()
#define SWIGV8_INT32_NEW(num) v8::Int32::New(num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(num)
#define SWIGV8_OBJECT_NEW() v8::Object::New()
#define SWIGV8_UNDEFINED() v8::Undefined()
#define SWIGV8_ARRAY v8::Handle<v8::Array>
#define SWIGV8_FUNCTION_TEMPLATE v8::Handle<v8::FunctionTemplate>
#define SWIGV8_OBJECT v8::Handle<v8::Object>
#define SWIGV8_OBJECT_TEMPLATE v8::Handle<v8::ObjectTemplate>
#define SWIGV8_VALUE v8::Handle<v8::Value>
#define SWIGV8_NULL() v8::Null()
#else
#define SWIGV8_ARRAY_NEW() v8::Array::New(v8::Isolate::GetCurrent())
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(v8::Isolate::GetCurrent(), bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(v8::Isolate::GetCurrent(), val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(v8::Isolate::GetCurrent(), func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New(v8::Isolate::GetCurrent())
#define SWIGV8_INT32_NEW(num) v8::Int32::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(v8::Isolate::GetCurrent(), num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_OBJECT_NEW() v8::Object::New(v8::Isolate::GetCurrent())
#define SWIGV8_UNDEFINED() v8::Undefined(v8::Isolate::GetCurrent())
#define SWIGV8_ARRAY v8::Local<v8::Array>
#define SWIGV8_FUNCTION_TEMPLATE v8::Local<v8::FunctionTemplate>
#define SWIGV8_OBJECT v8::Local<v8::Object>
#define SWIGV8_OBJECT_TEMPLATE v8::Local<v8::ObjectTemplate>
#define SWIGV8_VALUE v8::Local<v8::Value>
#define SWIGV8_NULL() v8::Null(v8::Isolate::GetCurrent())
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(class);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(v8::Isolate::GetCurrent(), class);
#else
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ.Reset(v8::Isolate::GetCurrent(), class);
#endif

#ifdef NODE_VERSION
#if NODE_VERSION_AT_LEAST(10, 12, 0)
#define SWIG_NODE_AT_LEAST_1012
#endif
#endif

//Necessary to check Node.js version because V8 API changes are backported in Node.js
#if (defined(NODE_VERSION) && !defined(SWIG_NODE_AT_LEAST_1012)) || \
    (!defined(NODE_VERSION) && (V8_MAJOR_VERSION-0) < 7)
#define SWIGV8_TO_OBJECT(handle) (handle)->ToObject()
#define SWIGV8_TO_STRING(handle) (handle)->ToString()
#define SWIGV8_NUMBER_VALUE(handle) (handle)->NumberValue()
#define SWIGV8_INTEGER_VALUE(handle) (handle)->IntegerValue()
#define SWIGV8_BOOLEAN_VALUE(handle) (handle)->BooleanValue()
#define SWIGV8_WRITE_UTF8(handle, buffer, len) (handle)->WriteUtf8(buffer, len)
#define SWIGV8_UTF8_LENGTH(handle) (handle)->Utf8Length()
#elif (SWIG_V8_VERSION < 0x0706)
#define SWIGV8_TO_OBJECT(handle) (handle)->ToObject(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked()
#define SWIGV8_TO_STRING(handle) (handle)->ToString(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked()
#define SWIGV8_NUMBER_VALUE(handle) (handle)->NumberValue(SWIGV8_CURRENT_CONTEXT()).ToChecked()
#define SWIGV8_INTEGER_VALUE(handle) (handle)->IntegerValue(SWIGV8_CURRENT_CONTEXT()).ToChecked()
#define SWIGV8_BOOLEAN_VALUE(handle) (handle)->BooleanValue(SWIGV8_CURRENT_CONTEXT()).ToChecked()
#define SWIGV8_WRITE_UTF8(handle, buffer, len) (handle)->WriteUtf8(v8::Isolate::GetCurrent(), buffer, len)
#define SWIGV8_UTF8_LENGTH(handle) (handle)->Utf8Length(v8::Isolate::GetCurrent())
#else
#define SWIGV8_TO_OBJECT(handle) (handle)->ToObject(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked()
#define SWIGV8_TO_STRING(handle) (handle)->ToString(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked()
#define SWIGV8_NUMBER_VALUE(handle) (handle)->NumberValue(SWIGV8_CURRENT_CONTEXT()).ToChecked()
#define SWIGV8_INTEGER_VALUE(handle) (handle)->IntegerValue(SWIGV8_CURRENT_CONTEXT()).ToChecked()
#define SWIGV8_BOOLEAN_VALUE(handle) (handle)->BooleanValue(v8::Isolate::GetCurrent())
#define SWIGV8_WRITE_UTF8(handle, buffer, len) (handle)->WriteUtf8(v8::Isolate::GetCurrent(), buffer, len)
#define SWIGV8_UTF8_LENGTH(handle) (handle)->Utf8Length(v8::Isolate::GetCurrent())
#endif


/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) do { SWIGV8_ErrorHandler.error(code, msg); SWIG_fail; } while (0)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

SWIGINTERN void SWIG_V8_Raise(const char *msg) {
  SWIGV8_THROW_EXCEPTION(v8::Exception::Error(SWIGV8_STRING_NEW(msg)));
}

/*
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be reset properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.

  - See definition of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload',
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual ~V8ErrorHandler() {}
  virtual void error(int code, const char *msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
SWIGRUNTIME V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char *msg) {
    err = v8::Exception::Error(SWIGV8_STRING_NEW(msg));
    if(code != SWIG_TypeError) {
        SWIGV8_THROW_EXCEPTION(err);
    }
  }
  SWIGV8_VALUE err;
};

/* ---------------------------------------------------------------------------
 * Basic Proxy object
 *
 * ---------------------------------------------------------------------------*/

// Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    SWIGV8_ADJUST_MEMORY(SWIGV8_AVG_OBJ_SIZE);
  };

  ~SWIGV8_Proxy() {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
    handle.ClearWeak();
    handle.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
    handle.ClearWeak(v8::Isolate::GetCurrent());
    handle.Dispose(v8::Isolate::GetCurrent());
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.ClearWeak();
    handle.Dispose();
#else    
    handle.ClearWeak();
    handle.Reset();
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.Clear();
#endif

    SWIGV8_ADJUST_MEMORY(-SWIGV8_AVG_OBJ_SIZE);
  }

  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
  v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
public:
  v8::Persistent<v8::FunctionTemplate> class_templ;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  void (*dtor) (v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy);
#elif (V8_MAJOR_VERSION-0) < 5
  void (*dtor) (const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data);
#else
  void (*dtor) (const v8::WeakCallbackInfo<SWIGV8_Proxy> &data);
#endif
};

SWIGRUNTIME v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

SWIGRUNTIME int SWIG_V8_ConvertInstancePtr(SWIGV8_OBJECT objRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
    if (!tc && cdata->info->name) {
      tc = SWIG_TypeCheck(cdata->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }
  *ptr = cdata->swigCObject;
  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#else
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#endif

  delete proxy;
}

SWIGRUNTIME int SWIG_V8_GetInstancePtr(SWIGV8_VALUE valRef, void **ptr) {
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  SWIGV8_OBJECT objRef = SWIGV8_TO_OBJECT(valRef);

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }

  *ptr = cdata->swigCObject;

  return SWIG_OK;
}

SWIGRUNTIME void SWIGV8_SetPrivateData(SWIGV8_OBJECT obj, void *ptr, swig_type_info *info, int flags) {
  SWIGV8_Proxy *cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  // clientdata must be set for owned data as we need to register the dtor
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 5
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#else
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor, v8::WeakCallbackType::kParameter);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor, v8::WeakCallbackType::kParameter);
  }
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#elif (SWIG_V8_VERSION < 0x0706)
  cdata->handle.MarkIndependent();
// Looks like future versions do not require that anymore:
// https://monorail-prod.appspot.com/p/chromium/issues/detail?id=923361#c11
#endif
}

SWIGRUNTIME int SWIG_V8_ConvertPtr(SWIGV8_VALUE valRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();
  
  /* special case: JavaScript null => C NULL pointer */
  if(valRef->IsNull()) {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  SWIGV8_OBJECT objRef = SWIGV8_TO_OBJECT(valRef);
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

SWIGRUNTIME SWIGV8_VALUE SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE_ESC();
  
  SWIGV8_FUNCTION_TEMPLATE class_templ;

  if (ptr == NULL) {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    SWIGV8_ESCAPE(SWIGV8_NULL());
#else    
    v8::Local<v8::Primitive> result = SWIGV8_NULL();
    SWIGV8_ESCAPE(result);
#endif
  }

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  if(info->clientdata != 0) {
    class_templ = ((SWIGV8_ClientData*) info->clientdata)->class_templ;
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
  }
#else
  v8::Isolate *isolate = v8::Isolate::GetCurrent();

  if(info->clientdata != 0) {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, ((SWIGV8_ClientData*) info->clientdata)->class_templ);
  } else {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, SWIGV8_SWIGTYPE_Proxy_class_templ);
  }
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903) || (SWIG_V8_VERSION < 0x0705)
  v8::Local<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
#else
  v8::Local<v8::Object> result = class_templ->InstanceTemplate()->NewInstance(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif

  SWIGV8_SetPrivateData(result, ptr, info, flags);

  SWIGV8_ESCAPE(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)    SWIG_V8_GetInstancePtr(obj, ptr)

SWIGRUNTIME SwigV8ReturnValue _SWIGV8_wrap_equals(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(args[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult =  SWIGV8_BOOLEAN_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

SWIGRUNTIME SwigV8ReturnValue _wrap_getCPtr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = SWIGV8_NUMBER_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

/* ---------------------------------------------------------------------------
 * PackedData object
 *
 * ---------------------------------------------------------------------------*/

class SwigV8PackedData {
public:
  SwigV8PackedData(void *data, size_t size, swig_type_info *type): data(data), size(size), type(type) {};

  ~SwigV8PackedData() {
  };

  void *data;
  size_t size;
  swig_type_info *type;

  v8::Persistent<v8::Object> handle;
};

SWIGRUNTIMEINLINE
int SwigV8Packed_Check(SWIGV8_VALUE valRef) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT objRef = SWIGV8_TO_OBJECT(valRef);
  if(objRef->InternalFieldCount() < 1) return false;
#if (V8_MAJOR_VERSION-0) < 5
  v8::Handle<v8::Value> flag = objRef->GetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("__swig__packed_data__"));
  v8::Local<v8::Value> flag;
  if (!objRef->GetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey).ToLocal(&flag))
    return false;
#endif
  return (flag->IsBoolean() && SWIGV8_BOOLEAN_VALUE(flag));
}

SWIGRUNTIME
swig_type_info *SwigV8Packed_UnpackData(SWIGV8_VALUE valRef, void *ptr, size_t size) {
  if (SwigV8Packed_Check(valRef)) {
    SWIGV8_HANDLESCOPE();
    
    SwigV8PackedData *sobj;

    SWIGV8_OBJECT objRef = SWIGV8_TO_OBJECT(valRef);

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
    v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
    sobj = static_cast<SwigV8PackedData*>(v8::External::Unwrap(cdataRef));
#else
    sobj = static_cast<SwigV8PackedData*>(objRef->GetAlignedPointerFromInternalField(0));
#endif
    if (sobj == NULL || sobj->size != size) return 0;
    memcpy(ptr, sobj->data, size);
    return sobj->type;
  } else {
    return 0;
  }
}

SWIGRUNTIME
int SWIGV8_ConvertPacked(SWIGV8_VALUE valRef, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigV8Packed_UnpackData(valRef, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Persistent< v8::Value > object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Object> *object, SwigV8PackedData *cdata) {
#elif (V8_MAJOR_VERSION-0) < 5
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackData<v8::Object, SwigV8PackedData> &data) {
  v8::Local<v8::Object> object = data.GetValue();
  SwigV8PackedData *cdata = data.GetParameter();
#else
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackInfo<SwigV8PackedData> &data) {
  SwigV8PackedData *cdata = data.GetParameter();
#endif

  delete cdata;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  object.Clear();
  object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  object.Clear();
  object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
  object.Clear();
#endif
}

SWIGRUNTIME
SWIGV8_VALUE SWIGV8_NewPackedObj(void *data, size_t size, swig_type_info *type) {
  SWIGV8_HANDLESCOPE_ESC();

  SwigV8PackedData *cdata = new SwigV8PackedData(data, size, type);
//  v8::Handle<v8::Object> obj = SWIGV8_OBJECT_NEW();
  v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();

#if (V8_MAJOR_VERSION-0) < 5
  obj->SetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"), SWIGV8_BOOLEAN_NEW(true));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("__swig__packed_data__"));
  obj->SetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey, SWIGV8_BOOLEAN_NEW(true));
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 5
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete);
//  v8::V8::SetWeak(&cdata->handle, cdata, _wrap_SwigV8PackedData_delete);
#else
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete, v8::WeakCallbackType::kParameter);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#elif (SWIG_V8_VERSION < 0x0706)
  cdata->handle.MarkIndependent();
// Looks like future versions do not require that anymore:
// https://monorail-prod.appspot.com/p/chromium/issues/detail?id=923361#c11
#endif

  SWIGV8_ESCAPE(obj);
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIGV8_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIGV8_NewPackedObj(ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

SWIGV8_VALUE SWIGV8_AppendOutput(SWIGV8_VALUE result, SWIGV8_VALUE obj) {
  SWIGV8_HANDLESCOPE_ESC();
  
  if (result->IsUndefined()) {
    result = SWIGV8_ARRAY_NEW();
  }
  SWIGV8_ARRAY arr = SWIGV8_ARRAY::Cast(result);

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903) || (SWIG_V8_VERSION < 0x0706)
  arr->Set(arr->Length(), obj);
#else
  arr->Set(SWIGV8_CURRENT_CONTEXT(), arr->Length(), obj);
#endif

  SWIGV8_ESCAPE(arr);
}



// Note: since 3.19 there are new CallBack types, since 03.21.9 the old ones have been removed
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::InvocationCallback  SwigV8FunctionCallback;
typedef v8::AccessorGetter      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetter      SwigV8AccessorSetterCallback;
typedef v8::AccessorInfo        SwigV8PropertyCallbackInfoVoid;
#elif (V8_MAJOR_VERSION-0) < 5
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorGetterCallback      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetterCallback      SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#else
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorNameGetterCallback  SwigV8AccessorGetterCallback;
typedef v8::AccessorNameSetterCallback  SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#endif

/**
 * Creates a class template for a class with specified initialization function.
 */
SWIGRUNTIME SWIGV8_FUNCTION_TEMPLATE SWIGV8_CreateClassTemplate(const char* symbol) {
    SWIGV8_HANDLESCOPE_ESC();
    
    v8::Local<v8::FunctionTemplate> class_templ = SWIGV8_FUNCTEMPLATE_NEW_VOID();
    class_templ->SetClassName(SWIGV8_SYMBOL_NEW(symbol));

    SWIGV8_OBJECT_TEMPLATE inst_templ = class_templ->InstanceTemplate();
    inst_templ->SetInternalFieldCount(1);

    SWIGV8_OBJECT_TEMPLATE equals_templ = class_templ->PrototypeTemplate();
    equals_templ->Set(SWIGV8_SYMBOL_NEW("equals"), SWIGV8_FUNCTEMPLATE_NEW(_SWIGV8_wrap_equals));

    SWIGV8_OBJECT_TEMPLATE cptr_templ = class_templ->PrototypeTemplate();
    cptr_templ->Set(SWIGV8_SYMBOL_NEW("getCPtr"), SWIGV8_FUNCTEMPLATE_NEW(_wrap_getCPtr));

    SWIGV8_ESCAPE(class_templ);
}

/**
 * Registers a class method with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberFunction(SWIGV8_FUNCTION_TEMPLATE class_templ, const char* symbol,
  SwigV8FunctionCallback _func) {
    SWIGV8_OBJECT_TEMPLATE proto_templ = class_templ->PrototypeTemplate();
    proto_templ->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func));
}

/**
 * Registers a class property with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberVariable(SWIGV8_FUNCTION_TEMPLATE class_templ, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  SWIGV8_OBJECT_TEMPLATE proto_templ = class_templ->InstanceTemplate();
  proto_templ->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticFunction(SWIGV8_OBJECT obj, const char* symbol,
  const SwigV8FunctionCallback& _func) {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903) || (SWIG_V8_VERSION < 0x0705)
  obj->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func)->GetFunction());
#elif (SWIG_V8_VERSION < 0x0706)
  obj->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func)->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked());
#else
  obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func)->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked());
#endif
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticVariable(SWIGV8_OBJECT obj, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
#if (V8_MAJOR_VERSION-0) < 5
  obj->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
#else
  obj->SetAccessor(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW(symbol), getter, setter);
#endif
}

#if (V8_MAJOR_VERSION-0) < 5
SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid& info)
#else
SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid& info)
#endif
{
    char buffer[256];
    char msg[512];
    int res;

#if (V8_MAJOR_VERSION-0) < 5
    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);
#else
    v8::Local<v8::String> sproperty;
    if (property->ToString(SWIGV8_CURRENT_CONTEXT()).ToLocal(&sproperty)) {
      SWIGV8_WRITE_UTF8(sproperty, buffer, 256);
      res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);
    }
    else {
      res = -1;
    }
#endif

    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
fail: ;
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CollectionConfig swig_types[0]
#define SWIGTYPE_p_CollectionT_ValueMetaDataKey_ValueMetaData_t swig_types[1]
#define SWIGTYPE_p_CollectionT_byte_ComponentMetaData_t swig_types[2]
#define SWIGTYPE_p_CollectionT_std__string_PropertyMetaData_t swig_types[3]
#define SWIGTYPE_p_CollectionT_uint32_t_ProfileMetaData_t swig_types[4]
#define SWIGTYPE_p_ComponentMetaData swig_types[5]
#define SWIGTYPE_p_ConfigBase swig_types[6]
#define SWIGTYPE_p_ConfigDeviceDetection swig_types[7]
#define SWIGTYPE_p_ConfigHash swig_types[8]
#define SWIGTYPE_p_Date swig_types[9]
#define SWIGTYPE_p_EngineBase swig_types[10]
#define SWIGTYPE_p_EngineDeviceDetection swig_types[11]
#define SWIGTYPE_p_EngineHash swig_types[12]
#define SWIGTYPE_p_EvidenceBase swig_types[13]
#define SWIGTYPE_p_EvidenceDeviceDetection swig_types[14]
#define SWIGTYPE_p_MetaData swig_types[15]
#define SWIGTYPE_p_ProfileMetaData swig_types[16]
#define SWIGTYPE_p_PropertyMetaData swig_types[17]
#define SWIGTYPE_p_RequiredPropertiesConfig swig_types[18]
#define SWIGTYPE_p_ResultsBase swig_types[19]
#define SWIGTYPE_p_ResultsDeviceDetection swig_types[20]
#define SWIGTYPE_p_ResultsHash swig_types[21]
#define SWIGTYPE_p_ValueMetaData swig_types[22]
#define SWIGTYPE_p_ValueMetaDataKey swig_types[23]
#define SWIGTYPE_p_ValueT_bool_t swig_types[24]
#define SWIGTYPE_p_ValueT_double_t swig_types[25]
#define SWIGTYPE_p_ValueT_int_t swig_types[26]
#define SWIGTYPE_p_ValueT_std__string_t swig_types[27]
#define SWIGTYPE_p_ValueT_std__vectorT_std__string_t_t swig_types[28]
#define SWIGTYPE_p_byte swig_types[29]
#define SWIGTYPE_p_char swig_types[30]
#define SWIGTYPE_p_difference_type swig_types[31]
#define SWIGTYPE_p_int swig_types[32]
#define SWIGTYPE_p_key_type swig_types[33]
#define SWIGTYPE_p_long_long swig_types[34]
#define SWIGTYPE_p_mapped_type swig_types[35]
#define SWIGTYPE_p_short swig_types[36]
#define SWIGTYPE_p_signed_char swig_types[37]
#define SWIGTYPE_p_size_type swig_types[38]
#define SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t swig_types[39]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[40]
#define SWIGTYPE_p_unsigned_char swig_types[41]
#define SWIGTYPE_p_unsigned_int swig_types[42]
#define SWIGTYPE_p_unsigned_long_long swig_types[43]
#define SWIGTYPE_p_unsigned_short swig_types[44]
#define SWIGTYPE_p_value_type swig_types[45]
static swig_type_info *swig_types[47];
static swig_module_info swig_module = {swig_types, 46, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <assert.h>


#include "device-detection-cxx/src/hash/EngineHash.hpp"

using namespace FiftyoneDegrees::Common;
using namespace FiftyoneDegrees::DeviceDetection;
using namespace FiftyoneDegrees::DeviceDetection::Hash;


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERNINLINE
SWIGV8_VALUE SWIG_From_long  (long value)
{
  return SWIGV8_NUMBER_NEW(value);
}


SWIGINTERNINLINE
SWIGV8_VALUE SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW(static_cast< long >(value));
}


SWIGINTERNINLINE SWIGV8_VALUE
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE
SWIGV8_VALUE
SWIG_From_bool  (bool value)
{
  return SWIGV8_BOOLEAN_NEW(value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(SWIGV8_VALUE valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef->IsString()) {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    v8::Handle<v8::String> js_str = SWIGV8_TO_STRING(valRef);
#else
    v8::Local<v8::String> js_str = SWIGV8_TO_STRING(valRef);
#endif

    size_t len = SWIGV8_UTF8_LENGTH(js_str) + 1;
    char* cstr = new char[len];
    SWIGV8_WRITE_UTF8(js_str, cstr, len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef->IsObject()) {
      SWIGV8_OBJECT obj = SWIGV8_TO_OBJECT(valRef);
      // try if the object is a wrapped char[]
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
      return SWIG_TypeError;
    } else {
      return SWIG_TypeError;
    }
  }
}


SWIGINTERN int
SWIG_AsPtr_std_string (SWIGV8_VALUE obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}

SWIGINTERN std::string const &std_map_Sl_std_string_Sc_std_string_Sg__get(std::map< std::string,std::string > *self,std::string const &key){
                std::map< std::string, std::string, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }

SWIGINTERNINLINE SWIGV8_VALUE
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      // TODO: handle extra long strings
      return SWIGV8_UNDEFINED();
    } else {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
      v8::Handle<v8::String> js_str = SWIGV8_STRING_NEW2(carray, size);
#else
      v8::Local<v8::String> js_str = SWIGV8_STRING_NEW2(carray, size);
#endif
      return js_str;
    }
  } else {
    return SWIGV8_UNDEFINED();
  }
}


SWIGINTERNINLINE SWIGV8_VALUE
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__set(std::map< std::string,std::string > *self,std::string const &key,std::string const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__del(std::map< std::string,std::string > *self,std::string const &key){
                std::map< std::string, std::string, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__has_key(std::map< std::string,std::string > *self,std::string const &key){
                std::map< std::string, std::string, std::less< std::string > >::iterator i = self->find(key);
                return i != self->end();
            }

SWIGINTERN
int SWIG_AsVal_double (SWIGV8_VALUE obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = SWIGV8_NUMBER_VALUE(obj);

  return SWIG_OK;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (SWIGV8_VALUE obj, unsigned long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long longVal = (long) SWIGV8_NUMBER_VALUE(obj);

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_unsigned_SS_long_SS_long (SWIGV8_VALUE obj, unsigned long long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long long longVal = (long long) SWIGV8_NUMBER_VALUE(obj);

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (SWIGV8_VALUE obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE
SWIGV8_VALUE SWIG_From_long_SS_long  (long long value)
{
  return SWIGV8_NUMBER_NEW(value);
}
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE
SWIGV8_VALUE SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE SWIGV8_VALUE
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


SWIGINTERN
int SWIG_AsVal_int (SWIGV8_VALUE valRef, int* val)
{
  if (!valRef->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = SWIGV8_INTEGER_VALUE(valRef);

  return SWIG_OK;
}

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }




SWIGINTERNINLINE SWIGV8_VALUE 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERNINLINE
SWIGV8_VALUE SWIG_From_int  (int value)
{
  return SWIGV8_INT32_NEW(value);
}


SWIGINTERN
SWIGV8_VALUE SWIG_From_double   (double val)
{
  return SWIGV8_NUMBER_NEW(val);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (SWIGV8_VALUE obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN
int SWIG_AsVal_long (SWIGV8_VALUE obj, long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long) SWIGV8_INTEGER_VALUE(obj);

  return SWIG_OK;
}


#include <stdint.h>		// Use the C99 official header


SWIGINTERN
int SWIG_AsVal_bool (SWIGV8_VALUE obj, bool *val)
{
  if(!obj->IsBoolean()) {
    return SWIG_ERROR;
  }

  if (val) *val = SWIGV8_BOOLEAN_VALUE(obj);
  return SWIG_OK;
}


SWIGINTERNINLINE SWIGV8_VALUE
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}

SWIGINTERN void EvidenceBase_set(EvidenceBase *self,std::string const &key,std::string const &value){
         self->operator[](key) = value;
    }
SWIGINTERN std::string const &EvidenceBase_get(EvidenceBase *self,std::string const &key){
        return self->operator[](key);
    }
SWIGINTERN int EvidenceBase_size(EvidenceBase *self){
        return self->size();
    }

SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (SWIGV8_VALUE obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


#define SWIGV8_INIT DeviceDetectionHashEngineModule_initialize


SWIGV8_ClientData _exports_MapStringStringSwig_clientData;
SWIGV8_ClientData _exports_VectorStringSwig_clientData;
SWIGV8_ClientData _exports_RequiredPropertiesConfigSwig_clientData;
SWIGV8_ClientData _exports_StringValueSwig_clientData;
SWIGV8_ClientData _exports_BoolValueSwig_clientData;
SWIGV8_ClientData _exports_IntegerValueSwig_clientData;
SWIGV8_ClientData _exports_VectorStringValuesSwig_clientData;
SWIGV8_ClientData _exports_DoubleValueSwig_clientData;
SWIGV8_ClientData _exports_ResultsBaseSwig_clientData;
SWIGV8_ClientData _exports_Date_clientData;
SWIGV8_ClientData _exports_PropertyMetaDataSwig_clientData;
SWIGV8_ClientData _exports_ComponentMetaDataSwig_clientData;
SWIGV8_ClientData _exports_ProfileMetaDataSwig_clientData;
SWIGV8_ClientData _exports_ValueMetaDataKeySwig_clientData;
SWIGV8_ClientData _exports_ValueMetaDataSwig_clientData;
SWIGV8_ClientData _exports_ComponentMetaDataCollectionSwig_clientData;
SWIGV8_ClientData _exports_PropertyMetaDataCollectionSwig_clientData;
SWIGV8_ClientData _exports_ProfileMetaDataCollectionSwig_clientData;
SWIGV8_ClientData _exports_ValueMetaDataCollectionSwig_clientData;
SWIGV8_ClientData _exports_MetaDataSwig_clientData;
SWIGV8_ClientData _exports_EngineBaseSwig_clientData;
SWIGV8_ClientData _exports_ConfigBaseSwig_clientData;
SWIGV8_ClientData _exports_ConfigDeviceDetectionSwig_clientData;
SWIGV8_ClientData _exports_EvidenceBaseSwig_clientData;
SWIGV8_ClientData _exports_EvidenceDeviceDetectionSwig_clientData;
SWIGV8_ClientData _exports_EngineDeviceDetectionSwig_clientData;
SWIGV8_ClientData _exports_ResultsDeviceDetectionSwig_clientData;
SWIGV8_ClientData _exports_ResultsHashSwig_clientData;
SWIGV8_ClientData _exports_CollectionConfigSwig_clientData;
SWIGV8_ClientData _exports_ConfigHashSwig_clientData;
SWIGV8_ClientData _exports_EngineHashSwig_clientData;


static SwigV8ReturnValue _wrap_new_MapStringStringSwig__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  std::map< std::string,std::string > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_MapStringStringSwig__SWIG_0.");
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_MapStringStringSwig__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  std::map< std::string,std::string > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::map< std::string,std::string > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_MapStringStringSwig__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MapStringStringSwig" "', argument " "1"" of type '" "std::map< std::string,std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MapStringStringSwig" "', argument " "1"" of type '" "std::map< std::string,std::string > const &""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_MapStringStringSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  SWIGV8_VALUE self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_MapStringStringSwig__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    } else {
      goto fail;
    }
#else
    _wrap_new_MapStringStringSwig__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    } else {
      goto fail;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_MapStringStringSwig__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    } else {
      goto fail;
    }
#else
    _wrap_new_MapStringStringSwig__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    } else {
      goto fail;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_MapStringStringSwig");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MapStringStringSwig_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MapStringStringSwig_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapStringStringSwig_size" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (unsigned int)((std::map< std::string,std::string > const *)arg1)->size();
  jsresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MapStringStringSwig_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MapStringStringSwig_empty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapStringStringSwig_empty" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MapStringStringSwig_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MapStringStringSwig_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapStringStringSwig_clear" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MapStringStringSwig_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::string *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MapStringStringSwig_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapStringStringSwig_get" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MapStringStringSwig_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MapStringStringSwig_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (std::string *) &std_map_Sl_std_string_Sc_std_string_Sg__get(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(*result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MapStringStringSwig_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MapStringStringSwig_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapStringStringSwig_set" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MapStringStringSwig_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MapStringStringSwig_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MapStringStringSwig_set" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MapStringStringSwig_set" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  std_map_Sl_std_string_Sc_std_string_Sg__set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MapStringStringSwig_del(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MapStringStringSwig_del.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapStringStringSwig_del" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MapStringStringSwig_del" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MapStringStringSwig_del" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_std_string_Sg__del(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MapStringStringSwig_has_key(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MapStringStringSwig_has_key.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapStringStringSwig_has_key" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MapStringStringSwig_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MapStringStringSwig_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__has_key(arg1,(std::string const &)*arg2);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_MapStringStringSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_MapStringStringSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_MapStringStringSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_MapStringStringSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_MapStringStringSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            std::map< std::string,std::string > * arg1 = (std::map< std::string,std::string > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_VectorStringSwig__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  std::vector< std::string > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_VectorStringSwig__SWIG_0.");
  result = (std::vector< std::string > *)new std::vector< std::string >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_VectorStringSwig__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::string > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_VectorStringSwig__SWIG_1.");
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorStringSwig" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_VectorStringSwig__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  std::vector< std::string > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::vector< std::string > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_VectorStringSwig__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorStringSwig" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorStringSwig" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_VectorStringSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  SWIGV8_VALUE self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_VectorStringSwig__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    } else {
      goto fail;
    }
#else
    _wrap_new_VectorStringSwig__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    } else {
      goto fail;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_VectorStringSwig__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    } else {
      goto fail;
    }
#else
    _wrap_new_VectorStringSwig__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    } else {
      goto fail;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_VectorStringSwig__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    } else {
      goto fail;
    }
#else
    _wrap_new_VectorStringSwig__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    } else {
      goto fail;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_VectorStringSwig");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VectorStringSwig_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VectorStringSwig_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorStringSwig_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->size();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VectorStringSwig_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VectorStringSwig_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorStringSwig_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VectorStringSwig_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VectorStringSwig_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorStringSwig_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorStringSwig_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VectorStringSwig_isEmpty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VectorStringSwig_isEmpty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorStringSwig_isEmpty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VectorStringSwig_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VectorStringSwig_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorStringSwig_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VectorStringSwig_add(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VectorStringSwig_add.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorStringSwig_add" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorStringSwig_add" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorStringSwig_add" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VectorStringSwig_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VectorStringSwig_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorStringSwig_get" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorStringSwig_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(*result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VectorStringSwig_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VectorStringSwig_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorStringSwig_set" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorStringSwig_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorStringSwig_set" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorStringSwig_set" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_VectorStringSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_VectorStringSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_VectorStringSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_VectorStringSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_VectorStringSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            std::vector< std::string > * arg1 = (std::vector< std::string > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_RequiredPropertiesConfigSwig__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  RequiredPropertiesConfig *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_RequiredPropertiesConfigSwig__SWIG_0.");
  {
    try {
      result = (RequiredPropertiesConfig *)new RequiredPropertiesConfig();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_RequiredPropertiesConfig, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_RequiredPropertiesConfigSwig__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RequiredPropertiesConfig *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_RequiredPropertiesConfigSwig__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RequiredPropertiesConfigSwig" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (RequiredPropertiesConfig *)new RequiredPropertiesConfig((std::vector< std::string > const *)arg1);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_RequiredPropertiesConfig, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_RequiredPropertiesConfigSwig__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  RequiredPropertiesConfig *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_RequiredPropertiesConfigSwig__SWIG_2.");
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RequiredPropertiesConfigSwig" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (RequiredPropertiesConfig *)new RequiredPropertiesConfig((char const *)arg1);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_RequiredPropertiesConfig, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_RequiredPropertiesConfigSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  SWIGV8_VALUE self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_RequiredPropertiesConfigSwig__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    } else {
      goto fail;
    }
#else
    _wrap_new_RequiredPropertiesConfigSwig__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    } else {
      goto fail;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_RequiredPropertiesConfigSwig__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    } else {
      goto fail;
    }
#else
    _wrap_new_RequiredPropertiesConfigSwig__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    } else {
      goto fail;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_RequiredPropertiesConfigSwig__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    } else {
      goto fail;
    }
#else
    _wrap_new_RequiredPropertiesConfigSwig__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    } else {
      goto fail;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_RequiredPropertiesConfigSwig");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_RequiredPropertiesConfigSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_RequiredPropertiesConfigSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_RequiredPropertiesConfigSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_RequiredPropertiesConfigSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_RequiredPropertiesConfigSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            RequiredPropertiesConfig * arg1 = (RequiredPropertiesConfig *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_RequiredPropertiesConfigSwig_getProperties(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  RequiredPropertiesConfig *arg1 = (RequiredPropertiesConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RequiredPropertiesConfigSwig_getProperties.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RequiredPropertiesConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RequiredPropertiesConfigSwig_getProperties" "', argument " "1"" of type '" "RequiredPropertiesConfig *""'"); 
  }
  arg1 = reinterpret_cast< RequiredPropertiesConfig * >(argp1);
  {
    try {
      result = (arg1)->getProperties();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new std::vector< std::string >(static_cast< const std::vector< std::string >& >(result))), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_StringValueSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  Value< std::string > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_StringValueSwig.");
  {
    try {
      result = (Value< std::string > *)new Value< std::string >();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ValueT_std__string_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringValueSwig_hasValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Value< std::string > *arg1 = (Value< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringValueSwig_hasValue.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringValueSwig_hasValue" "', argument " "1"" of type '" "Value< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< Value< std::string > * >(argp1);
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringValueSwig_getNoValueMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Value< std::string > *arg1 = (Value< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringValueSwig_getNoValueMessage.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringValueSwig_getNoValueMessage" "', argument " "1"" of type '" "Value< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< Value< std::string > * >(argp1);
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StringValueSwig_getValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Value< std::string > *arg1 = (Value< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StringValueSwig_getValue.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringValueSwig_getValue" "', argument " "1"" of type '" "Value< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< Value< std::string > * >(argp1);
  {
    try {
      result = (arg1)->getValue();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_StringValueSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_StringValueSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_StringValueSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_StringValueSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_StringValueSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            Value< std::string > * arg1 = (Value< std::string > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_BoolValueSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  Value< bool > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_BoolValueSwig.");
  {
    try {
      result = (Value< bool > *)new Value< bool >();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ValueT_bool_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BoolValueSwig_hasValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Value< bool > *arg1 = (Value< bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BoolValueSwig_hasValue.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueT_bool_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoolValueSwig_hasValue" "', argument " "1"" of type '" "Value< bool > *""'"); 
  }
  arg1 = reinterpret_cast< Value< bool > * >(argp1);
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BoolValueSwig_getNoValueMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Value< bool > *arg1 = (Value< bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BoolValueSwig_getNoValueMessage.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueT_bool_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoolValueSwig_getNoValueMessage" "', argument " "1"" of type '" "Value< bool > *""'"); 
  }
  arg1 = reinterpret_cast< Value< bool > * >(argp1);
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BoolValueSwig_getValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Value< bool > *arg1 = (Value< bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BoolValueSwig_getValue.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueT_bool_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoolValueSwig_getValue" "', argument " "1"" of type '" "Value< bool > *""'"); 
  }
  arg1 = reinterpret_cast< Value< bool > * >(argp1);
  {
    try {
      result = (bool)(arg1)->getValue();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_BoolValueSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_BoolValueSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_BoolValueSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_BoolValueSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_BoolValueSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            Value< bool > * arg1 = (Value< bool > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_IntegerValueSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  Value< int > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_IntegerValueSwig.");
  {
    try {
      result = (Value< int > *)new Value< int >();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ValueT_int_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IntegerValueSwig_hasValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Value< int > *arg1 = (Value< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IntegerValueSwig_hasValue.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegerValueSwig_hasValue" "', argument " "1"" of type '" "Value< int > *""'"); 
  }
  arg1 = reinterpret_cast< Value< int > * >(argp1);
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IntegerValueSwig_getNoValueMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Value< int > *arg1 = (Value< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IntegerValueSwig_getNoValueMessage.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegerValueSwig_getNoValueMessage" "', argument " "1"" of type '" "Value< int > *""'"); 
  }
  arg1 = reinterpret_cast< Value< int > * >(argp1);
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IntegerValueSwig_getValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Value< int > *arg1 = (Value< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IntegerValueSwig_getValue.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegerValueSwig_getValue" "', argument " "1"" of type '" "Value< int > *""'"); 
  }
  arg1 = reinterpret_cast< Value< int > * >(argp1);
  {
    try {
      result = (int)(arg1)->getValue();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_IntegerValueSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_IntegerValueSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_IntegerValueSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_IntegerValueSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_IntegerValueSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            Value< int > * arg1 = (Value< int > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_VectorStringValuesSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  Value< std::vector< std::string > > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_VectorStringValuesSwig.");
  {
    try {
      result = (Value< std::vector< std::string > > *)new Value< std::vector< std::string > >();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ValueT_std__vectorT_std__string_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VectorStringValuesSwig_hasValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Value< std::vector< std::string > > *arg1 = (Value< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VectorStringValuesSwig_hasValue.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueT_std__vectorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorStringValuesSwig_hasValue" "', argument " "1"" of type '" "Value< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< Value< std::vector< std::string > > * >(argp1);
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VectorStringValuesSwig_getNoValueMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Value< std::vector< std::string > > *arg1 = (Value< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VectorStringValuesSwig_getNoValueMessage.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueT_std__vectorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorStringValuesSwig_getNoValueMessage" "', argument " "1"" of type '" "Value< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< Value< std::vector< std::string > > * >(argp1);
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_VectorStringValuesSwig_getValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Value< std::vector< std::string > > *arg1 = (Value< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_VectorStringValuesSwig_getValue.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueT_std__vectorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorStringValuesSwig_getValue" "', argument " "1"" of type '" "Value< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< Value< std::vector< std::string > > * >(argp1);
  {
    try {
      result = (arg1)->getValue();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new std::vector< std::string >(static_cast< const std::vector< std::string >& >(result))), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_VectorStringValuesSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_VectorStringValuesSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_VectorStringValuesSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_VectorStringValuesSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_VectorStringValuesSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            Value< std::vector< std::string > > * arg1 = (Value< std::vector< std::string > > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_DoubleValueSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  Value< double > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_DoubleValueSwig.");
  {
    try {
      result = (Value< double > *)new Value< double >();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ValueT_double_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_DoubleValueSwig_hasValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Value< double > *arg1 = (Value< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DoubleValueSwig_hasValue.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValueSwig_hasValue" "', argument " "1"" of type '" "Value< double > *""'"); 
  }
  arg1 = reinterpret_cast< Value< double > * >(argp1);
  {
    try {
      result = (bool)(arg1)->hasValue();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_DoubleValueSwig_getNoValueMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Value< double > *arg1 = (Value< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DoubleValueSwig_getNoValueMessage.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValueSwig_getNoValueMessage" "', argument " "1"" of type '" "Value< double > *""'"); 
  }
  arg1 = reinterpret_cast< Value< double > * >(argp1);
  {
    try {
      result = (char *)(arg1)->getNoValueMessage();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_DoubleValueSwig_getValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Value< double > *arg1 = (Value< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DoubleValueSwig_getValue.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValueSwig_getValue" "', argument " "1"" of type '" "Value< double > *""'"); 
  }
  arg1 = reinterpret_cast< Value< double > * >(argp1);
  {
    try {
      result = (double)(arg1)->getValue();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_DoubleValueSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_DoubleValueSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_DoubleValueSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_DoubleValueSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_DoubleValueSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            Value< double > * arg1 = (Value< double > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ResultsBaseSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ResultsBaseSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ResultsBaseSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_ResultsBaseSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_ResultsBaseSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            ResultsBase * arg1 = (ResultsBase *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_ResultsBaseSwig_getAvailableProperties(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ResultsBaseSwig_getAvailableProperties.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsBaseSwig_getAvailableProperties" "', argument " "1"" of type '" "ResultsBase *""'"); 
  }
  arg1 = reinterpret_cast< ResultsBase * >(argp1);
  {
    try {
      result = (int)(arg1)->getAvailableProperties();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig_containsProperty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ResultsBaseSwig_containsProperty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsBaseSwig_containsProperty" "', argument " "1"" of type '" "ResultsBase *""'"); 
  }
  arg1 = reinterpret_cast< ResultsBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ResultsBaseSwig_containsProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ResultsBaseSwig_containsProperty" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(arg1)->containsProperty((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig_getProperties(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ResultsBaseSwig_getProperties.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsBaseSwig_getProperties" "', argument " "1"" of type '" "ResultsBase *""'"); 
  }
  arg1 = reinterpret_cast< ResultsBase * >(argp1);
  {
    try {
      result = (arg1)->getProperties();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new std::vector< std::string >(static_cast< const std::vector< std::string >& >(result))), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig_getPropertyName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ResultsBaseSwig_getPropertyName.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsBaseSwig_getPropertyName" "', argument " "1"" of type '" "ResultsBase *""'"); 
  }
  arg1 = reinterpret_cast< ResultsBase * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ResultsBaseSwig_getPropertyName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->getPropertyName(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig_getValues__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Value< std::vector< std::string > > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsBaseSwig_getValues" "', argument " "1"" of type '" "ResultsBase *""'"); 
  }
  arg1 = reinterpret_cast< ResultsBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ResultsBaseSwig_getValues" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ResultsBaseSwig_getValues" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->getValues((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new Value< std::vector< std::string > >(static_cast< const Value< std::vector< std::string > >& >(result))), SWIGTYPE_p_ValueT_std__vectorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig_getValues__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Value< std::vector< std::string > > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsBaseSwig_getValues" "', argument " "1"" of type '" "ResultsBase *""'"); 
  }
  arg1 = reinterpret_cast< ResultsBase * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ResultsBaseSwig_getValues" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->getValues(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new Value< std::vector< std::string > >(static_cast< const Value< std::vector< std::string > >& >(result))), SWIGTYPE_p_ValueT_std__vectorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig__wrap_ResultsBaseSwig_getValues(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsBaseSwig_getValues__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsBaseSwig_getValues__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsBaseSwig_getValues__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsBaseSwig_getValues__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getValues.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig_getValueAsString__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Value< std::string > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsBaseSwig_getValueAsString" "', argument " "1"" of type '" "ResultsBase *""'"); 
  }
  arg1 = reinterpret_cast< ResultsBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ResultsBaseSwig_getValueAsString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ResultsBaseSwig_getValueAsString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->getValueAsString((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new Value< std::string >(static_cast< const Value< std::string >& >(result))), SWIGTYPE_p_ValueT_std__string_t, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig_getValueAsString__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Value< std::string > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsBaseSwig_getValueAsString" "', argument " "1"" of type '" "ResultsBase *""'"); 
  }
  arg1 = reinterpret_cast< ResultsBase * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ResultsBaseSwig_getValueAsString" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->getValueAsString(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new Value< std::string >(static_cast< const Value< std::string >& >(result))), SWIGTYPE_p_ValueT_std__string_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig__wrap_ResultsBaseSwig_getValueAsString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsBaseSwig_getValueAsString__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsBaseSwig_getValueAsString__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsBaseSwig_getValueAsString__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsBaseSwig_getValueAsString__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getValueAsString.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig_getValueAsBool__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Value< bool > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsBaseSwig_getValueAsBool" "', argument " "1"" of type '" "ResultsBase *""'"); 
  }
  arg1 = reinterpret_cast< ResultsBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ResultsBaseSwig_getValueAsBool" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ResultsBaseSwig_getValueAsBool" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->getValueAsBool((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new Value< bool >(static_cast< const Value< bool >& >(result))), SWIGTYPE_p_ValueT_bool_t, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig_getValueAsBool__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Value< bool > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsBaseSwig_getValueAsBool" "', argument " "1"" of type '" "ResultsBase *""'"); 
  }
  arg1 = reinterpret_cast< ResultsBase * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ResultsBaseSwig_getValueAsBool" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->getValueAsBool(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new Value< bool >(static_cast< const Value< bool >& >(result))), SWIGTYPE_p_ValueT_bool_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig__wrap_ResultsBaseSwig_getValueAsBool(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsBaseSwig_getValueAsBool__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsBaseSwig_getValueAsBool__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsBaseSwig_getValueAsBool__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsBaseSwig_getValueAsBool__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getValueAsBool.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig_getValueAsInteger__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Value< int > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsBaseSwig_getValueAsInteger" "', argument " "1"" of type '" "ResultsBase *""'"); 
  }
  arg1 = reinterpret_cast< ResultsBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ResultsBaseSwig_getValueAsInteger" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ResultsBaseSwig_getValueAsInteger" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->getValueAsInteger((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new Value< int >(static_cast< const Value< int >& >(result))), SWIGTYPE_p_ValueT_int_t, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig_getValueAsInteger__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Value< int > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsBaseSwig_getValueAsInteger" "', argument " "1"" of type '" "ResultsBase *""'"); 
  }
  arg1 = reinterpret_cast< ResultsBase * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ResultsBaseSwig_getValueAsInteger" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->getValueAsInteger(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new Value< int >(static_cast< const Value< int >& >(result))), SWIGTYPE_p_ValueT_int_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig__wrap_ResultsBaseSwig_getValueAsInteger(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsBaseSwig_getValueAsInteger__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsBaseSwig_getValueAsInteger__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsBaseSwig_getValueAsInteger__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsBaseSwig_getValueAsInteger__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getValueAsInteger.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig_getValueAsDouble__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Value< double > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsBaseSwig_getValueAsDouble" "', argument " "1"" of type '" "ResultsBase *""'"); 
  }
  arg1 = reinterpret_cast< ResultsBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ResultsBaseSwig_getValueAsDouble" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ResultsBaseSwig_getValueAsDouble" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->getValueAsDouble((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new Value< double >(static_cast< const Value< double >& >(result))), SWIGTYPE_p_ValueT_double_t, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig_getValueAsDouble__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsBase *arg1 = (ResultsBase *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Value< double > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsBaseSwig_getValueAsDouble" "', argument " "1"" of type '" "ResultsBase *""'"); 
  }
  arg1 = reinterpret_cast< ResultsBase * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ResultsBaseSwig_getValueAsDouble" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->getValueAsDouble(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new Value< double >(static_cast< const Value< double >& >(result))), SWIGTYPE_p_ValueT_double_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsBaseSwig__wrap_ResultsBaseSwig_getValueAsDouble(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsBaseSwig_getValueAsDouble__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsBaseSwig_getValueAsDouble__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsBaseSwig_getValueAsDouble__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsBaseSwig_getValueAsDouble__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getValueAsDouble.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_ResultsBaseSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class ResultsBaseSwig can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Date_getYear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Date *arg1 = (Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Date_getYear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_getYear" "', argument " "1"" of type '" "Date *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  {
    try {
      result = (int)(arg1)->getYear();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Date_getMonth(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Date *arg1 = (Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Date_getMonth.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_getMonth" "', argument " "1"" of type '" "Date *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  {
    try {
      result = (int)(arg1)->getMonth();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Date_getDay(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Date *arg1 = (Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Date_getDay.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_getDay" "', argument " "1"" of type '" "Date *""'"); 
  }
  arg1 = reinterpret_cast< Date * >(argp1);
  {
    try {
      result = (int)(arg1)->getDay();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Date(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Date(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Date(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Date(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Date(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            Date * arg1 = (Date *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_veto_Date(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Date can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PropertyMetaDataSwig_getName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertyMetaDataSwig_getName.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_PropertyMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyMetaDataSwig_getName" "', argument " "1"" of type '" "PropertyMetaData *""'"); 
  }
  arg1 = reinterpret_cast< PropertyMetaData * >(argp1);
  {
    try {
      result = (arg1)->getName();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PropertyMetaDataSwig_getDataFilesWherePresent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertyMetaDataSwig_getDataFilesWherePresent.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_PropertyMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyMetaDataSwig_getDataFilesWherePresent" "', argument " "1"" of type '" "PropertyMetaData *""'"); 
  }
  arg1 = reinterpret_cast< PropertyMetaData * >(argp1);
  {
    try {
      result = (arg1)->getDataFilesWherePresent();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new std::vector< std::string >(static_cast< const std::vector< std::string >& >(result))), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PropertyMetaDataSwig_getType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertyMetaDataSwig_getType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_PropertyMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyMetaDataSwig_getType" "', argument " "1"" of type '" "PropertyMetaData *""'"); 
  }
  arg1 = reinterpret_cast< PropertyMetaData * >(argp1);
  {
    try {
      result = (arg1)->getType();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PropertyMetaDataSwig_getCategory(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertyMetaDataSwig_getCategory.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_PropertyMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyMetaDataSwig_getCategory" "', argument " "1"" of type '" "PropertyMetaData *""'"); 
  }
  arg1 = reinterpret_cast< PropertyMetaData * >(argp1);
  {
    try {
      result = (arg1)->getCategory();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PropertyMetaDataSwig_getUrl(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertyMetaDataSwig_getUrl.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_PropertyMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyMetaDataSwig_getUrl" "', argument " "1"" of type '" "PropertyMetaData *""'"); 
  }
  arg1 = reinterpret_cast< PropertyMetaData * >(argp1);
  {
    try {
      result = (arg1)->getUrl();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PropertyMetaDataSwig_getAvailable(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertyMetaDataSwig_getAvailable.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_PropertyMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyMetaDataSwig_getAvailable" "', argument " "1"" of type '" "PropertyMetaData *""'"); 
  }
  arg1 = reinterpret_cast< PropertyMetaData * >(argp1);
  {
    try {
      result = (bool)(arg1)->getAvailable();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PropertyMetaDataSwig_getDisplayOrder(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertyMetaDataSwig_getDisplayOrder.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_PropertyMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyMetaDataSwig_getDisplayOrder" "', argument " "1"" of type '" "PropertyMetaData *""'"); 
  }
  arg1 = reinterpret_cast< PropertyMetaData * >(argp1);
  {
    try {
      result = (int)(arg1)->getDisplayOrder();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PropertyMetaDataSwig_getIsMandatory(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertyMetaDataSwig_getIsMandatory.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_PropertyMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyMetaDataSwig_getIsMandatory" "', argument " "1"" of type '" "PropertyMetaData *""'"); 
  }
  arg1 = reinterpret_cast< PropertyMetaData * >(argp1);
  {
    try {
      result = (bool)(arg1)->getIsMandatory();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PropertyMetaDataSwig_getIsList(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertyMetaDataSwig_getIsList.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_PropertyMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyMetaDataSwig_getIsList" "', argument " "1"" of type '" "PropertyMetaData *""'"); 
  }
  arg1 = reinterpret_cast< PropertyMetaData * >(argp1);
  {
    try {
      result = (bool)(arg1)->getIsList();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PropertyMetaDataSwig_getIsObsolete(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertyMetaDataSwig_getIsObsolete.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_PropertyMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyMetaDataSwig_getIsObsolete" "', argument " "1"" of type '" "PropertyMetaData *""'"); 
  }
  arg1 = reinterpret_cast< PropertyMetaData * >(argp1);
  {
    try {
      result = (bool)(arg1)->getIsObsolete();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PropertyMetaDataSwig_getShow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertyMetaDataSwig_getShow.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_PropertyMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyMetaDataSwig_getShow" "', argument " "1"" of type '" "PropertyMetaData *""'"); 
  }
  arg1 = reinterpret_cast< PropertyMetaData * >(argp1);
  {
    try {
      result = (bool)(arg1)->getShow();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PropertyMetaDataSwig_getShowValues(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertyMetaDataSwig_getShowValues.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_PropertyMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyMetaDataSwig_getShowValues" "', argument " "1"" of type '" "PropertyMetaData *""'"); 
  }
  arg1 = reinterpret_cast< PropertyMetaData * >(argp1);
  {
    try {
      result = (bool)(arg1)->getShowValues();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PropertyMetaDataSwig_getDescription(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  PropertyMetaData *arg1 = (PropertyMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertyMetaDataSwig_getDescription.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_PropertyMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyMetaDataSwig_getDescription" "', argument " "1"" of type '" "PropertyMetaData *""'"); 
  }
  arg1 = reinterpret_cast< PropertyMetaData * >(argp1);
  {
    try {
      result = (arg1)->getDescription();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_PropertyMetaDataSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_PropertyMetaDataSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_PropertyMetaDataSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_PropertyMetaDataSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_PropertyMetaDataSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            PropertyMetaData * arg1 = (PropertyMetaData *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_veto_PropertyMetaDataSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class PropertyMetaDataSwig can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ComponentMetaDataSwig_getComponentIdAsInt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ComponentMetaData *arg1 = (ComponentMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ComponentMetaDataSwig_getComponentIdAsInt.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ComponentMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentMetaDataSwig_getComponentIdAsInt" "', argument " "1"" of type '" "ComponentMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ComponentMetaData * >(argp1);
  {
    try {
      result = (int)(arg1)->getComponentIdAsInt();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ComponentMetaDataSwig_getComponentId(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ComponentMetaData *arg1 = (ComponentMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  byte result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ComponentMetaDataSwig_getComponentId.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ComponentMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentMetaDataSwig_getComponentId" "', argument " "1"" of type '" "ComponentMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ComponentMetaData * >(argp1);
  {
    try {
      result = (arg1)->getComponentId();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new byte(static_cast< const byte& >(result))), SWIGTYPE_p_byte, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ComponentMetaDataSwig_getName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ComponentMetaData *arg1 = (ComponentMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ComponentMetaDataSwig_getName.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ComponentMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentMetaDataSwig_getName" "', argument " "1"" of type '" "ComponentMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ComponentMetaData * >(argp1);
  {
    try {
      result = (arg1)->getName();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ComponentMetaDataSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ComponentMetaDataSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ComponentMetaDataSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_ComponentMetaDataSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_ComponentMetaDataSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            ComponentMetaData * arg1 = (ComponentMetaData *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_veto_ComponentMetaDataSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class ComponentMetaDataSwig can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ProfileMetaDataSwig_getProfileId(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ProfileMetaData *arg1 = (ProfileMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ProfileMetaDataSwig_getProfileId.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ProfileMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProfileMetaDataSwig_getProfileId" "', argument " "1"" of type '" "ProfileMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ProfileMetaData * >(argp1);
  {
    try {
      result = (uint32_t)(arg1)->getProfileId();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ProfileMetaDataSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ProfileMetaDataSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ProfileMetaDataSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_ProfileMetaDataSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_ProfileMetaDataSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            ProfileMetaData * arg1 = (ProfileMetaData *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_veto_ProfileMetaDataSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class ProfileMetaDataSwig can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_ValueMetaDataKeySwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  std::string arg1 ;
  std::string arg2 ;
  ValueMetaDataKey *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ValueMetaDataKeySwig.");
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ValueMetaDataKeySwig" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ValueMetaDataKeySwig" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (ValueMetaDataKey *)new ValueMetaDataKey(arg1,arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ValueMetaDataKey, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ValueMetaDataKeySwig_getPropertyName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ValueMetaDataKey *arg1 = (ValueMetaDataKey *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ValueMetaDataKeySwig_getPropertyName.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueMetaDataKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMetaDataKeySwig_getPropertyName" "', argument " "1"" of type '" "ValueMetaDataKey *""'"); 
  }
  arg1 = reinterpret_cast< ValueMetaDataKey * >(argp1);
  {
    try {
      result = (arg1)->getPropertyName();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ValueMetaDataKeySwig_getValueName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ValueMetaDataKey *arg1 = (ValueMetaDataKey *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ValueMetaDataKeySwig_getValueName.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueMetaDataKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMetaDataKeySwig_getValueName" "', argument " "1"" of type '" "ValueMetaDataKey *""'"); 
  }
  arg1 = reinterpret_cast< ValueMetaDataKey * >(argp1);
  {
    try {
      result = (arg1)->getValueName();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ValueMetaDataKeySwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ValueMetaDataKeySwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ValueMetaDataKeySwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_ValueMetaDataKeySwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_ValueMetaDataKeySwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            ValueMetaDataKey * arg1 = (ValueMetaDataKey *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_ValueMetaDataSwig_getName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ValueMetaData *arg1 = (ValueMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ValueMetaDataSwig_getName.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMetaDataSwig_getName" "', argument " "1"" of type '" "ValueMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ValueMetaData * >(argp1);
  {
    try {
      result = (arg1)->getName();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ValueMetaDataSwig_getDescription(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ValueMetaData *arg1 = (ValueMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ValueMetaDataSwig_getDescription.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMetaDataSwig_getDescription" "', argument " "1"" of type '" "ValueMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ValueMetaData * >(argp1);
  {
    try {
      result = (arg1)->getDescription();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ValueMetaDataSwig_getUrl(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ValueMetaData *arg1 = (ValueMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ValueMetaDataSwig_getUrl.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ValueMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMetaDataSwig_getUrl" "', argument " "1"" of type '" "ValueMetaData *""'"); 
  }
  arg1 = reinterpret_cast< ValueMetaData * >(argp1);
  {
    try {
      result = (arg1)->getUrl();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ValueMetaDataSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ValueMetaDataSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ValueMetaDataSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_ValueMetaDataSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_ValueMetaDataSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            ValueMetaData * arg1 = (ValueMetaData *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_veto_ValueMetaDataSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class ValueMetaDataSwig can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ComponentMetaDataCollectionSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ComponentMetaDataCollectionSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ComponentMetaDataCollectionSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_ComponentMetaDataCollectionSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_ComponentMetaDataCollectionSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            Collection< byte,ComponentMetaData > * arg1 = (Collection< byte,ComponentMetaData > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_ComponentMetaDataCollectionSwig_getByKey(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Collection< byte,ComponentMetaData > *arg1 = (Collection< byte,ComponentMetaData > *) 0 ;
  byte arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ComponentMetaData *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ComponentMetaDataCollectionSwig_getByKey.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionT_byte_ComponentMetaData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentMetaDataCollectionSwig_getByKey" "', argument " "1"" of type '" "Collection< byte,ComponentMetaData > *""'"); 
  }
  arg1 = reinterpret_cast< Collection< byte,ComponentMetaData > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_byte,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComponentMetaDataCollectionSwig_getByKey" "', argument " "2"" of type '" "byte""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComponentMetaDataCollectionSwig_getByKey" "', argument " "2"" of type '" "byte""'");
    } else {
      arg2 = *(reinterpret_cast< byte * >(argp2));
    }
  }
  {
    try {
      result = (ComponentMetaData *)(arg1)->getByKey(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ComponentMetaData, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ComponentMetaDataCollectionSwig_getByIndex(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Collection< byte,ComponentMetaData > *arg1 = (Collection< byte,ComponentMetaData > *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  ComponentMetaData *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ComponentMetaDataCollectionSwig_getByIndex.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionT_byte_ComponentMetaData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentMetaDataCollectionSwig_getByIndex" "', argument " "1"" of type '" "Collection< byte,ComponentMetaData > *""'"); 
  }
  arg1 = reinterpret_cast< Collection< byte,ComponentMetaData > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ComponentMetaDataCollectionSwig_getByIndex" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (ComponentMetaData *)(arg1)->getByIndex(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ComponentMetaData, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ComponentMetaDataCollectionSwig_getSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Collection< byte,ComponentMetaData > *arg1 = (Collection< byte,ComponentMetaData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ComponentMetaDataCollectionSwig_getSize.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionT_byte_ComponentMetaData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComponentMetaDataCollectionSwig_getSize" "', argument " "1"" of type '" "Collection< byte,ComponentMetaData > *""'"); 
  }
  arg1 = reinterpret_cast< Collection< byte,ComponentMetaData > * >(argp1);
  {
    try {
      result = (uint32_t)(arg1)->getSize();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_ComponentMetaDataCollectionSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class ComponentMetaDataCollectionSwig can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_PropertyMetaDataCollectionSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_PropertyMetaDataCollectionSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_PropertyMetaDataCollectionSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_PropertyMetaDataCollectionSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_PropertyMetaDataCollectionSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            Collection< std::string,PropertyMetaData > * arg1 = (Collection< std::string,PropertyMetaData > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_PropertyMetaDataCollectionSwig_getByKey(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Collection< std::string,PropertyMetaData > *arg1 = (Collection< std::string,PropertyMetaData > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PropertyMetaData *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertyMetaDataCollectionSwig_getByKey.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionT_std__string_PropertyMetaData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyMetaDataCollectionSwig_getByKey" "', argument " "1"" of type '" "Collection< std::string,PropertyMetaData > *""'"); 
  }
  arg1 = reinterpret_cast< Collection< std::string,PropertyMetaData > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PropertyMetaDataCollectionSwig_getByKey" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (PropertyMetaData *)(arg1)->getByKey(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PropertyMetaData, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PropertyMetaDataCollectionSwig_getByIndex(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Collection< std::string,PropertyMetaData > *arg1 = (Collection< std::string,PropertyMetaData > *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PropertyMetaData *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertyMetaDataCollectionSwig_getByIndex.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionT_std__string_PropertyMetaData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyMetaDataCollectionSwig_getByIndex" "', argument " "1"" of type '" "Collection< std::string,PropertyMetaData > *""'"); 
  }
  arg1 = reinterpret_cast< Collection< std::string,PropertyMetaData > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PropertyMetaDataCollectionSwig_getByIndex" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (PropertyMetaData *)(arg1)->getByIndex(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PropertyMetaData, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PropertyMetaDataCollectionSwig_getSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Collection< std::string,PropertyMetaData > *arg1 = (Collection< std::string,PropertyMetaData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertyMetaDataCollectionSwig_getSize.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionT_std__string_PropertyMetaData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyMetaDataCollectionSwig_getSize" "', argument " "1"" of type '" "Collection< std::string,PropertyMetaData > *""'"); 
  }
  arg1 = reinterpret_cast< Collection< std::string,PropertyMetaData > * >(argp1);
  {
    try {
      result = (uint32_t)(arg1)->getSize();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_PropertyMetaDataCollectionSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class PropertyMetaDataCollectionSwig can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ProfileMetaDataCollectionSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ProfileMetaDataCollectionSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ProfileMetaDataCollectionSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_ProfileMetaDataCollectionSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_ProfileMetaDataCollectionSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            Collection< uint32_t,ProfileMetaData > * arg1 = (Collection< uint32_t,ProfileMetaData > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_ProfileMetaDataCollectionSwig_getByKey(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Collection< uint32_t,ProfileMetaData > *arg1 = (Collection< uint32_t,ProfileMetaData > *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  ProfileMetaData *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ProfileMetaDataCollectionSwig_getByKey.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionT_uint32_t_ProfileMetaData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProfileMetaDataCollectionSwig_getByKey" "', argument " "1"" of type '" "Collection< uint32_t,ProfileMetaData > *""'"); 
  }
  arg1 = reinterpret_cast< Collection< uint32_t,ProfileMetaData > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProfileMetaDataCollectionSwig_getByKey" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (ProfileMetaData *)(arg1)->getByKey(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ProfileMetaData, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ProfileMetaDataCollectionSwig_getByIndex(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Collection< uint32_t,ProfileMetaData > *arg1 = (Collection< uint32_t,ProfileMetaData > *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  ProfileMetaData *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ProfileMetaDataCollectionSwig_getByIndex.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionT_uint32_t_ProfileMetaData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProfileMetaDataCollectionSwig_getByIndex" "', argument " "1"" of type '" "Collection< uint32_t,ProfileMetaData > *""'"); 
  }
  arg1 = reinterpret_cast< Collection< uint32_t,ProfileMetaData > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProfileMetaDataCollectionSwig_getByIndex" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (ProfileMetaData *)(arg1)->getByIndex(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ProfileMetaData, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ProfileMetaDataCollectionSwig_getSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Collection< uint32_t,ProfileMetaData > *arg1 = (Collection< uint32_t,ProfileMetaData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ProfileMetaDataCollectionSwig_getSize.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionT_uint32_t_ProfileMetaData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProfileMetaDataCollectionSwig_getSize" "', argument " "1"" of type '" "Collection< uint32_t,ProfileMetaData > *""'"); 
  }
  arg1 = reinterpret_cast< Collection< uint32_t,ProfileMetaData > * >(argp1);
  {
    try {
      result = (uint32_t)(arg1)->getSize();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_ProfileMetaDataCollectionSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class ProfileMetaDataCollectionSwig can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ValueMetaDataCollectionSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ValueMetaDataCollectionSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ValueMetaDataCollectionSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_ValueMetaDataCollectionSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_ValueMetaDataCollectionSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            Collection< ValueMetaDataKey,ValueMetaData > * arg1 = (Collection< ValueMetaDataKey,ValueMetaData > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_ValueMetaDataCollectionSwig_getByKey(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Collection< ValueMetaDataKey,ValueMetaData > *arg1 = (Collection< ValueMetaDataKey,ValueMetaData > *) 0 ;
  SwigValueWrapper< ValueMetaDataKey > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ValueMetaData *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ValueMetaDataCollectionSwig_getByKey.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionT_ValueMetaDataKey_ValueMetaData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMetaDataCollectionSwig_getByKey" "', argument " "1"" of type '" "Collection< ValueMetaDataKey,ValueMetaData > *""'"); 
  }
  arg1 = reinterpret_cast< Collection< ValueMetaDataKey,ValueMetaData > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_ValueMetaDataKey,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueMetaDataCollectionSwig_getByKey" "', argument " "2"" of type '" "ValueMetaDataKey""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueMetaDataCollectionSwig_getByKey" "', argument " "2"" of type '" "ValueMetaDataKey""'");
    } else {
      arg2 = *(reinterpret_cast< ValueMetaDataKey * >(argp2));
    }
  }
  {
    try {
      result = (ValueMetaData *)(arg1)->getByKey(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ValueMetaData, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ValueMetaDataCollectionSwig_getByIndex(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Collection< ValueMetaDataKey,ValueMetaData > *arg1 = (Collection< ValueMetaDataKey,ValueMetaData > *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  ValueMetaData *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ValueMetaDataCollectionSwig_getByIndex.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionT_ValueMetaDataKey_ValueMetaData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMetaDataCollectionSwig_getByIndex" "', argument " "1"" of type '" "Collection< ValueMetaDataKey,ValueMetaData > *""'"); 
  }
  arg1 = reinterpret_cast< Collection< ValueMetaDataKey,ValueMetaData > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueMetaDataCollectionSwig_getByIndex" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (ValueMetaData *)(arg1)->getByIndex(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ValueMetaData, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ValueMetaDataCollectionSwig_getSize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  Collection< ValueMetaDataKey,ValueMetaData > *arg1 = (Collection< ValueMetaDataKey,ValueMetaData > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ValueMetaDataCollectionSwig_getSize.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionT_ValueMetaDataKey_ValueMetaData_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMetaDataCollectionSwig_getSize" "', argument " "1"" of type '" "Collection< ValueMetaDataKey,ValueMetaData > *""'"); 
  }
  arg1 = reinterpret_cast< Collection< ValueMetaDataKey,ValueMetaData > * >(argp1);
  {
    try {
      result = (uint32_t)(arg1)->getSize();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_ValueMetaDataCollectionSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class ValueMetaDataCollectionSwig can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_MetaDataSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_MetaDataSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_MetaDataSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_MetaDataSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_MetaDataSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            MetaData * arg1 = (MetaData *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_MetaDataSwig_getComponents(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  MetaData *arg1 = (MetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Collection< byte,ComponentMetaData > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MetaDataSwig_getComponents.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_MetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetaDataSwig_getComponents" "', argument " "1"" of type '" "MetaData *""'"); 
  }
  arg1 = reinterpret_cast< MetaData * >(argp1);
  {
    try {
      result = (Collection< byte,ComponentMetaData > *)(arg1)->getComponents();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CollectionT_byte_ComponentMetaData_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MetaDataSwig_getProperties(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  MetaData *arg1 = (MetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Collection< std::string,PropertyMetaData > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MetaDataSwig_getProperties.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_MetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetaDataSwig_getProperties" "', argument " "1"" of type '" "MetaData *""'"); 
  }
  arg1 = reinterpret_cast< MetaData * >(argp1);
  {
    try {
      result = (Collection< std::string,PropertyMetaData > *)(arg1)->getProperties();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CollectionT_std__string_PropertyMetaData_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MetaDataSwig_getProfiles(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  MetaData *arg1 = (MetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Collection< uint32_t,ProfileMetaData > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MetaDataSwig_getProfiles.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_MetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetaDataSwig_getProfiles" "', argument " "1"" of type '" "MetaData *""'"); 
  }
  arg1 = reinterpret_cast< MetaData * >(argp1);
  {
    try {
      result = (Collection< uint32_t,ProfileMetaData > *)(arg1)->getProfiles();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CollectionT_uint32_t_ProfileMetaData_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MetaDataSwig_getValues(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  MetaData *arg1 = (MetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Collection< ValueMetaDataKey,ValueMetaData > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MetaDataSwig_getValues.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_MetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetaDataSwig_getValues" "', argument " "1"" of type '" "MetaData *""'"); 
  }
  arg1 = reinterpret_cast< MetaData * >(argp1);
  {
    try {
      result = (Collection< ValueMetaDataKey,ValueMetaData > *)(arg1)->getValues();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CollectionT_ValueMetaDataKey_ValueMetaData_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MetaDataSwig_getValuesForProperty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  MetaData *arg1 = (MetaData *) 0 ;
  PropertyMetaData *arg2 = (PropertyMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Collection< ValueMetaDataKey,ValueMetaData > *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MetaDataSwig_getValuesForProperty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_MetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetaDataSwig_getValuesForProperty" "', argument " "1"" of type '" "MetaData *""'"); 
  }
  arg1 = reinterpret_cast< MetaData * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_PropertyMetaData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetaDataSwig_getValuesForProperty" "', argument " "2"" of type '" "PropertyMetaData *""'"); 
  }
  arg2 = reinterpret_cast< PropertyMetaData * >(argp2);
  {
    try {
      result = (Collection< ValueMetaDataKey,ValueMetaData > *)(arg1)->getValuesForProperty(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CollectionT_ValueMetaDataKey_ValueMetaData_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MetaDataSwig_getValuesForProfile(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  MetaData *arg1 = (MetaData *) 0 ;
  ProfileMetaData *arg2 = (ProfileMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Collection< ValueMetaDataKey,ValueMetaData > *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MetaDataSwig_getValuesForProfile.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_MetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetaDataSwig_getValuesForProfile" "', argument " "1"" of type '" "MetaData *""'"); 
  }
  arg1 = reinterpret_cast< MetaData * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ProfileMetaData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetaDataSwig_getValuesForProfile" "', argument " "2"" of type '" "ProfileMetaData *""'"); 
  }
  arg2 = reinterpret_cast< ProfileMetaData * >(argp2);
  {
    try {
      result = (Collection< ValueMetaDataKey,ValueMetaData > *)(arg1)->getValuesForProfile(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CollectionT_ValueMetaDataKey_ValueMetaData_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MetaDataSwig_getComponentForProfile(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  MetaData *arg1 = (MetaData *) 0 ;
  ProfileMetaData *arg2 = (ProfileMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ComponentMetaData *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MetaDataSwig_getComponentForProfile.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_MetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetaDataSwig_getComponentForProfile" "', argument " "1"" of type '" "MetaData *""'"); 
  }
  arg1 = reinterpret_cast< MetaData * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ProfileMetaData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetaDataSwig_getComponentForProfile" "', argument " "2"" of type '" "ProfileMetaData *""'"); 
  }
  arg2 = reinterpret_cast< ProfileMetaData * >(argp2);
  {
    try {
      result = (ComponentMetaData *)(arg1)->getComponentForProfile(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ComponentMetaData, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MetaDataSwig_getComponentForProperty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  MetaData *arg1 = (MetaData *) 0 ;
  PropertyMetaData *arg2 = (PropertyMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ComponentMetaData *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MetaDataSwig_getComponentForProperty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_MetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetaDataSwig_getComponentForProperty" "', argument " "1"" of type '" "MetaData *""'"); 
  }
  arg1 = reinterpret_cast< MetaData * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_PropertyMetaData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetaDataSwig_getComponentForProperty" "', argument " "2"" of type '" "PropertyMetaData *""'"); 
  }
  arg2 = reinterpret_cast< PropertyMetaData * >(argp2);
  {
    try {
      result = (ComponentMetaData *)(arg1)->getComponentForProperty(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ComponentMetaData, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MetaDataSwig_getDefaultProfileForComponent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  MetaData *arg1 = (MetaData *) 0 ;
  ComponentMetaData *arg2 = (ComponentMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ProfileMetaData *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MetaDataSwig_getDefaultProfileForComponent.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_MetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetaDataSwig_getDefaultProfileForComponent" "', argument " "1"" of type '" "MetaData *""'"); 
  }
  arg1 = reinterpret_cast< MetaData * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ComponentMetaData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetaDataSwig_getDefaultProfileForComponent" "', argument " "2"" of type '" "ComponentMetaData *""'"); 
  }
  arg2 = reinterpret_cast< ComponentMetaData * >(argp2);
  {
    try {
      result = (ProfileMetaData *)(arg1)->getDefaultProfileForComponent(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ProfileMetaData, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MetaDataSwig_getDefaultValueForProperty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  MetaData *arg1 = (MetaData *) 0 ;
  PropertyMetaData *arg2 = (PropertyMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ValueMetaData *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MetaDataSwig_getDefaultValueForProperty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_MetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetaDataSwig_getDefaultValueForProperty" "', argument " "1"" of type '" "MetaData *""'"); 
  }
  arg1 = reinterpret_cast< MetaData * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_PropertyMetaData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetaDataSwig_getDefaultValueForProperty" "', argument " "2"" of type '" "PropertyMetaData *""'"); 
  }
  arg2 = reinterpret_cast< PropertyMetaData * >(argp2);
  {
    try {
      result = (ValueMetaData *)(arg1)->getDefaultValueForProperty(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ValueMetaData, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MetaDataSwig_getPropertiesForComponent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  MetaData *arg1 = (MetaData *) 0 ;
  ComponentMetaData *arg2 = (ComponentMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Collection< std::string,PropertyMetaData > *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MetaDataSwig_getPropertiesForComponent.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_MetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetaDataSwig_getPropertiesForComponent" "', argument " "1"" of type '" "MetaData *""'"); 
  }
  arg1 = reinterpret_cast< MetaData * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ComponentMetaData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetaDataSwig_getPropertiesForComponent" "', argument " "2"" of type '" "ComponentMetaData *""'"); 
  }
  arg2 = reinterpret_cast< ComponentMetaData * >(argp2);
  {
    try {
      result = (Collection< std::string,PropertyMetaData > *)(arg1)->getPropertiesForComponent(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CollectionT_std__string_PropertyMetaData_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MetaDataSwig_getPropertyForValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  MetaData *arg1 = (MetaData *) 0 ;
  ValueMetaData *arg2 = (ValueMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PropertyMetaData *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MetaDataSwig_getPropertyForValue.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_MetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetaDataSwig_getPropertyForValue" "', argument " "1"" of type '" "MetaData *""'"); 
  }
  arg1 = reinterpret_cast< MetaData * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_ValueMetaData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetaDataSwig_getPropertyForValue" "', argument " "2"" of type '" "ValueMetaData *""'"); 
  }
  arg2 = reinterpret_cast< ValueMetaData * >(argp2);
  {
    try {
      result = (PropertyMetaData *)(arg1)->getPropertyForValue(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PropertyMetaData, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_MetaDataSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class MetaDataSwig can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_EngineBaseSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_EngineBaseSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_EngineBaseSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_EngineBaseSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_EngineBaseSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            EngineBase * arg1 = (EngineBase *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_EngineBaseSwig_setLicenseKey(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineBaseSwig_setLicenseKey.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineBaseSwig_setLicenseKey" "', argument " "1"" of type '" "EngineBase *""'"); 
  }
  arg1 = reinterpret_cast< EngineBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EngineBaseSwig_setLicenseKey" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EngineBaseSwig_setLicenseKey" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setLicenseKey((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineBaseSwig_setDataUpdateUrl(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineBase *arg1 = (EngineBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineBaseSwig_setDataUpdateUrl.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineBaseSwig_setDataUpdateUrl" "', argument " "1"" of type '" "EngineBase *""'"); 
  }
  arg1 = reinterpret_cast< EngineBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EngineBaseSwig_setDataUpdateUrl" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EngineBaseSwig_setDataUpdateUrl" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setDataUpdateUrl((std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineBaseSwig_getMetaData(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineBase *arg1 = (EngineBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MetaData *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineBaseSwig_getMetaData.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineBaseSwig_getMetaData" "', argument " "1"" of type '" "EngineBase *""'"); 
  }
  arg1 = reinterpret_cast< EngineBase * >(argp1);
  {
    try {
      result = (MetaData *)(arg1)->getMetaData();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetaData, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineBaseSwig_getAutomaticUpdatesEnabled(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineBase *arg1 = (EngineBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineBaseSwig_getAutomaticUpdatesEnabled.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineBaseSwig_getAutomaticUpdatesEnabled" "', argument " "1"" of type '" "EngineBase *""'"); 
  }
  arg1 = reinterpret_cast< EngineBase * >(argp1);
  {
    try {
      result = (bool)(arg1)->getAutomaticUpdatesEnabled();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineBaseSwig_processBase(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineBase *arg1 = (EngineBase *) 0 ;
  EvidenceBase *arg2 = (EvidenceBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ResultsBase *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineBaseSwig_processBase.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineBaseSwig_processBase" "', argument " "1"" of type '" "EngineBase *""'"); 
  }
  arg1 = reinterpret_cast< EngineBase * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_EvidenceBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EngineBaseSwig_processBase" "', argument " "2"" of type '" "EvidenceBase *""'"); 
  }
  arg2 = reinterpret_cast< EvidenceBase * >(argp2);
  {
    try {
      result = (ResultsBase *)(arg1)->processBase(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ResultsBase, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineBaseSwig_refreshData__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineBase *arg1 = (EngineBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineBaseSwig_refreshData" "', argument " "1"" of type '" "EngineBase *""'"); 
  }
  arg1 = reinterpret_cast< EngineBase * >(argp1);
  {
    try {
      (arg1)->refreshData();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineBaseSwig_refreshData__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineBase *arg1 = (EngineBase *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineBaseSwig_refreshData" "', argument " "1"" of type '" "EngineBase *""'"); 
  }
  arg1 = reinterpret_cast< EngineBase * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EngineBaseSwig_refreshData" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->refreshData((char const *)arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineBaseSwig_refreshData__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineBase *arg1 = (EngineBase *) 0 ;
  unsigned char *arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineBaseSwig_refreshData" "', argument " "1"" of type '" "EngineBase *""'"); 
  }
  arg1 = reinterpret_cast< EngineBase * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EngineBaseSwig_refreshData" "', argument " "2"" of type '" "unsigned char []""'"); 
  } 
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  ecode3 = SWIG_AsVal_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EngineBaseSwig_refreshData" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (arg1)->refreshData(arg2,arg3);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineBaseSwig__wrap_EngineBaseSwig_refreshData(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EngineBaseSwig_refreshData__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EngineBaseSwig_refreshData__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EngineBaseSwig_refreshData__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EngineBaseSwig_refreshData__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EngineBaseSwig_refreshData__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EngineBaseSwig_refreshData__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function refreshData.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineBaseSwig_getDataUpdateUrl(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineBase *arg1 = (EngineBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineBaseSwig_getDataUpdateUrl.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineBaseSwig_getDataUpdateUrl" "', argument " "1"" of type '" "EngineBase *""'"); 
  }
  arg1 = reinterpret_cast< EngineBase * >(argp1);
  {
    try {
      result = (arg1)->getDataUpdateUrl();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineBaseSwig_getPublishedTime(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineBase *arg1 = (EngineBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Date result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineBaseSwig_getPublishedTime.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineBaseSwig_getPublishedTime" "', argument " "1"" of type '" "EngineBase *""'"); 
  }
  arg1 = reinterpret_cast< EngineBase * >(argp1);
  {
    try {
      result = (arg1)->getPublishedTime();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new Date(static_cast< const Date& >(result))), SWIGTYPE_p_Date, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineBaseSwig_getUpdateAvailableTime(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineBase *arg1 = (EngineBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Date result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineBaseSwig_getUpdateAvailableTime.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineBaseSwig_getUpdateAvailableTime" "', argument " "1"" of type '" "EngineBase *""'"); 
  }
  arg1 = reinterpret_cast< EngineBase * >(argp1);
  {
    try {
      result = (arg1)->getUpdateAvailableTime();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new Date(static_cast< const Date& >(result))), SWIGTYPE_p_Date, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineBaseSwig_getDataFilePath(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineBase *arg1 = (EngineBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineBaseSwig_getDataFilePath.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineBaseSwig_getDataFilePath" "', argument " "1"" of type '" "EngineBase *""'"); 
  }
  arg1 = reinterpret_cast< EngineBase * >(argp1);
  {
    try {
      result = (arg1)->getDataFilePath();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineBaseSwig_getDataFileTempPath(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineBase *arg1 = (EngineBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineBaseSwig_getDataFileTempPath.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineBaseSwig_getDataFileTempPath" "', argument " "1"" of type '" "EngineBase *""'"); 
  }
  arg1 = reinterpret_cast< EngineBase * >(argp1);
  {
    try {
      result = (arg1)->getDataFileTempPath();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineBaseSwig_getProduct(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineBase *arg1 = (EngineBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineBaseSwig_getProduct.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineBaseSwig_getProduct" "', argument " "1"" of type '" "EngineBase *""'"); 
  }
  arg1 = reinterpret_cast< EngineBase * >(argp1);
  {
    try {
      result = (arg1)->getProduct();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineBaseSwig_getType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineBase *arg1 = (EngineBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineBaseSwig_getType.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineBaseSwig_getType" "', argument " "1"" of type '" "EngineBase *""'"); 
  }
  arg1 = reinterpret_cast< EngineBase * >(argp1);
  {
    try {
      result = (arg1)->getType();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineBaseSwig_getKeys(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineBase *arg1 = (EngineBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineBaseSwig_getKeys.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineBaseSwig_getKeys" "', argument " "1"" of type '" "EngineBase *""'"); 
  }
  arg1 = reinterpret_cast< EngineBase * >(argp1);
  {
    try {
      result = (std::vector< std::string > *)(arg1)->getKeys();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineBaseSwig_getIsThreadSafe(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineBase *arg1 = (EngineBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineBaseSwig_getIsThreadSafe.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineBaseSwig_getIsThreadSafe" "', argument " "1"" of type '" "EngineBase *""'"); 
  }
  arg1 = reinterpret_cast< EngineBase * >(argp1);
  {
    try {
      result = (bool)(arg1)->getIsThreadSafe();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_EngineBaseSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class EngineBaseSwig can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ConfigBaseSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ConfigBaseSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ConfigBaseSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_ConfigBaseSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_ConfigBaseSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            ConfigBase * arg1 = (ConfigBase *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_ConfigBaseSwig_setUseUpperPrefixHeaders(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigBaseSwig_setUseUpperPrefixHeaders.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigBaseSwig_setUseUpperPrefixHeaders" "', argument " "1"" of type '" "ConfigBase *""'"); 
  }
  arg1 = reinterpret_cast< ConfigBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigBaseSwig_setUseUpperPrefixHeaders" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setUseUpperPrefixHeaders(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigBaseSwig_setUseTempFile(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigBaseSwig_setUseTempFile.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigBaseSwig_setUseTempFile" "', argument " "1"" of type '" "ConfigBase *""'"); 
  }
  arg1 = reinterpret_cast< ConfigBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigBaseSwig_setUseTempFile" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setUseTempFile(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigBaseSwig_setReuseTempFile(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigBaseSwig_setReuseTempFile.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigBaseSwig_setReuseTempFile" "', argument " "1"" of type '" "ConfigBase *""'"); 
  }
  arg1 = reinterpret_cast< ConfigBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigBaseSwig_setReuseTempFile" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setReuseTempFile(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigBaseSwig_setTempDirectories(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  std::vector< std::string > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigBaseSwig_setTempDirectories.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigBaseSwig_setTempDirectories" "', argument " "1"" of type '" "ConfigBase *""'"); 
  }
  arg1 = reinterpret_cast< ConfigBase * >(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigBaseSwig_setTempDirectories" "', argument " "2"" of type '" "std::vector< std::string >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigBaseSwig_setTempDirectories" "', argument " "2"" of type '" "std::vector< std::string >""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector< std::string > * >(argp2));
    }
  }
  {
    try {
      (arg1)->setTempDirectories(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigBaseSwig_getUseUpperPrefixHeaders(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigBaseSwig_getUseUpperPrefixHeaders.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigBaseSwig_getUseUpperPrefixHeaders" "', argument " "1"" of type '" "ConfigBase *""'"); 
  }
  arg1 = reinterpret_cast< ConfigBase * >(argp1);
  {
    try {
      result = (bool)(arg1)->getUseUpperPrefixHeaders();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigBaseSwig_getUseTempFile(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigBaseSwig_getUseTempFile.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigBaseSwig_getUseTempFile" "', argument " "1"" of type '" "ConfigBase *""'"); 
  }
  arg1 = reinterpret_cast< ConfigBase * >(argp1);
  {
    try {
      result = (bool)(arg1)->getUseTempFile();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigBaseSwig_getReuseTempFile(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigBaseSwig_getReuseTempFile.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigBaseSwig_getReuseTempFile" "', argument " "1"" of type '" "ConfigBase *""'"); 
  }
  arg1 = reinterpret_cast< ConfigBase * >(argp1);
  {
    try {
      result = (bool)(arg1)->getReuseTempFile();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigBaseSwig_getTempDirectories(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigBaseSwig_getTempDirectories.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigBaseSwig_getTempDirectories" "', argument " "1"" of type '" "ConfigBase *""'"); 
  }
  arg1 = reinterpret_cast< ConfigBase * >(argp1);
  {
    try {
      result = (arg1)->getTempDirectories();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new std::vector< std::string >(static_cast< const std::vector< std::string >& >(result))), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigBaseSwig_getConcurrency(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigBase *arg1 = (ConfigBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigBaseSwig_getConcurrency.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigBaseSwig_getConcurrency" "', argument " "1"" of type '" "ConfigBase *""'"); 
  }
  arg1 = reinterpret_cast< ConfigBase * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->getConcurrency();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_ConfigBaseSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class ConfigBaseSwig can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigDeviceDetectionSwig_setUpdateMatchedUserAgent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigDeviceDetection *arg1 = (ConfigDeviceDetection *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigDeviceDetectionSwig_setUpdateMatchedUserAgent.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigDeviceDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigDeviceDetectionSwig_setUpdateMatchedUserAgent" "', argument " "1"" of type '" "ConfigDeviceDetection *""'"); 
  }
  arg1 = reinterpret_cast< ConfigDeviceDetection * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigDeviceDetectionSwig_setUpdateMatchedUserAgent" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setUpdateMatchedUserAgent(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigDeviceDetectionSwig_setMaxMatchedUserAgentLength(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigDeviceDetection *arg1 = (ConfigDeviceDetection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigDeviceDetectionSwig_setMaxMatchedUserAgentLength.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigDeviceDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigDeviceDetectionSwig_setMaxMatchedUserAgentLength" "', argument " "1"" of type '" "ConfigDeviceDetection *""'"); 
  }
  arg1 = reinterpret_cast< ConfigDeviceDetection * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigDeviceDetectionSwig_setMaxMatchedUserAgentLength" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setMaxMatchedUserAgentLength(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigDeviceDetectionSwig_setAllowUnmatched(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigDeviceDetection *arg1 = (ConfigDeviceDetection *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigDeviceDetectionSwig_setAllowUnmatched.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigDeviceDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigDeviceDetectionSwig_setAllowUnmatched" "', argument " "1"" of type '" "ConfigDeviceDetection *""'"); 
  }
  arg1 = reinterpret_cast< ConfigDeviceDetection * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigDeviceDetectionSwig_setAllowUnmatched" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setAllowUnmatched(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigDeviceDetectionSwig_getUpdateMatchedUserAgent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigDeviceDetection *arg1 = (ConfigDeviceDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigDeviceDetectionSwig_getUpdateMatchedUserAgent.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigDeviceDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigDeviceDetectionSwig_getUpdateMatchedUserAgent" "', argument " "1"" of type '" "ConfigDeviceDetection *""'"); 
  }
  arg1 = reinterpret_cast< ConfigDeviceDetection * >(argp1);
  {
    try {
      result = (bool)(arg1)->getUpdateMatchedUserAgent();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigDeviceDetectionSwig_getMaxMatchedUserAgentLength(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigDeviceDetection *arg1 = (ConfigDeviceDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigDeviceDetectionSwig_getMaxMatchedUserAgentLength.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigDeviceDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigDeviceDetectionSwig_getMaxMatchedUserAgentLength" "', argument " "1"" of type '" "ConfigDeviceDetection *""'"); 
  }
  arg1 = reinterpret_cast< ConfigDeviceDetection * >(argp1);
  {
    try {
      result = (int)(arg1)->getMaxMatchedUserAgentLength();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigDeviceDetectionSwig_getAllowUnmatched(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigDeviceDetection *arg1 = (ConfigDeviceDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigDeviceDetectionSwig_getAllowUnmatched.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigDeviceDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigDeviceDetectionSwig_getAllowUnmatched" "', argument " "1"" of type '" "ConfigDeviceDetection *""'"); 
  }
  arg1 = reinterpret_cast< ConfigDeviceDetection * >(argp1);
  {
    try {
      result = (bool)(arg1)->getAllowUnmatched();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ConfigDeviceDetectionSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ConfigDeviceDetectionSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ConfigDeviceDetectionSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_ConfigDeviceDetectionSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_ConfigDeviceDetectionSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            ConfigDeviceDetection * arg1 = (ConfigDeviceDetection *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_veto_ConfigDeviceDetectionSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class ConfigDeviceDetectionSwig can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_EvidenceBaseSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  EvidenceBase *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_EvidenceBaseSwig.");
  {
    try {
      result = (EvidenceBase *)new EvidenceBase();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_EvidenceBase, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_EvidenceBaseSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_EvidenceBaseSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_EvidenceBaseSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_EvidenceBaseSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_EvidenceBaseSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            EvidenceBase * arg1 = (EvidenceBase *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_EvidenceBaseSwig_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EvidenceBase *arg1 = (EvidenceBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EvidenceBaseSwig_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EvidenceBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EvidenceBaseSwig_set" "', argument " "1"" of type '" "EvidenceBase *""'"); 
  }
  arg1 = reinterpret_cast< EvidenceBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EvidenceBaseSwig_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EvidenceBaseSwig_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EvidenceBaseSwig_set" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EvidenceBaseSwig_set" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      EvidenceBase_set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EvidenceBaseSwig_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EvidenceBase *arg1 = (EvidenceBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::string *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EvidenceBaseSwig_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EvidenceBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EvidenceBaseSwig_get" "', argument " "1"" of type '" "EvidenceBase *""'"); 
  }
  arg1 = reinterpret_cast< EvidenceBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EvidenceBaseSwig_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EvidenceBaseSwig_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::string *) &EvidenceBase_get(arg1,(std::string const &)*arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(*result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EvidenceBaseSwig_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EvidenceBase *arg1 = (EvidenceBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EvidenceBaseSwig_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EvidenceBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EvidenceBaseSwig_size" "', argument " "1"" of type '" "EvidenceBase *""'"); 
  }
  arg1 = reinterpret_cast< EvidenceBase * >(argp1);
  {
    try {
      result = (int)EvidenceBase_size(arg1);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_EvidenceDeviceDetectionSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  EvidenceDeviceDetection *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_EvidenceDeviceDetectionSwig.");
  {
    try {
      result = (EvidenceDeviceDetection *)new EvidenceDeviceDetection();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_EvidenceDeviceDetection, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_EvidenceDeviceDetectionSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_EvidenceDeviceDetectionSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_EvidenceDeviceDetectionSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_EvidenceDeviceDetectionSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_EvidenceDeviceDetectionSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            EvidenceDeviceDetection * arg1 = (EvidenceDeviceDetection *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_EngineDeviceDetectionSwig_defaultElementDataKey_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_EngineDeviceDetectionSwig_defaultElementDataKey_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    std::string *arg1 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    
    {
      std::string *ptr = (std::string *)0;
      res1 = SWIG_AsPtr_std_string(value, &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineDeviceDetectionSwig_defaultElementDataKey_set" "', argument " "1"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EngineDeviceDetectionSwig_defaultElementDataKey_set" "', argument " "1"" of type '" "std::string const &""'"); 
      }
      arg1 = ptr;
    }
    EngineDeviceDetection::defaultElementDataKey = *arg1;
    if (SWIG_IsNewObj(res1)) delete arg1;
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_EngineDeviceDetectionSwig_defaultElementDataKey_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_EngineDeviceDetectionSwig_defaultElementDataKey_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    SWIGV8_VALUE jsresult;
    std::string *result = 0 ;
    
    result = (std::string *) &EngineDeviceDetection::defaultElementDataKey;
    jsresult = SWIG_From_std_string(static_cast< std::string >(*result));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_EngineDeviceDetectionSwig_processDeviceDetection__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineDeviceDetection *arg1 = (EngineDeviceDetection *) 0 ;
  EvidenceDeviceDetection *arg2 = (EvidenceDeviceDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ResultsDeviceDetection *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineDeviceDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineDeviceDetectionSwig_processDeviceDetection" "', argument " "1"" of type '" "EngineDeviceDetection *""'"); 
  }
  arg1 = reinterpret_cast< EngineDeviceDetection * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_EvidenceDeviceDetection, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EngineDeviceDetectionSwig_processDeviceDetection" "', argument " "2"" of type '" "EvidenceDeviceDetection *""'"); 
  }
  arg2 = reinterpret_cast< EvidenceDeviceDetection * >(argp2);
  {
    try {
      result = (ResultsDeviceDetection *)(arg1)->processDeviceDetection(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ResultsDeviceDetection, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineDeviceDetectionSwig_processDeviceDetection__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineDeviceDetection *arg1 = (EngineDeviceDetection *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  ResultsDeviceDetection *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineDeviceDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineDeviceDetectionSwig_processDeviceDetection" "', argument " "1"" of type '" "EngineDeviceDetection *""'"); 
  }
  arg1 = reinterpret_cast< EngineDeviceDetection * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EngineDeviceDetectionSwig_processDeviceDetection" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (ResultsDeviceDetection *)(arg1)->processDeviceDetection((char const *)arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ResultsDeviceDetection, SWIG_POINTER_OWN |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineDeviceDetectionSwig__wrap_EngineDeviceDetectionSwig_processDeviceDetection(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EngineDeviceDetectionSwig_processDeviceDetection__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EngineDeviceDetectionSwig_processDeviceDetection__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EngineDeviceDetectionSwig_processDeviceDetection__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EngineDeviceDetectionSwig_processDeviceDetection__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function processDeviceDetection.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_EngineDeviceDetectionSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_EngineDeviceDetectionSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_EngineDeviceDetectionSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_EngineDeviceDetectionSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_EngineDeviceDetectionSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            EngineDeviceDetection * arg1 = (EngineDeviceDetection *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_veto_EngineDeviceDetectionSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class EngineDeviceDetectionSwig can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsDeviceDetectionSwig_getDeviceId(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsDeviceDetection *arg1 = (ResultsDeviceDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ResultsDeviceDetectionSwig_getDeviceId.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsDeviceDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsDeviceDetectionSwig_getDeviceId" "', argument " "1"" of type '" "ResultsDeviceDetection *""'"); 
  }
  arg1 = reinterpret_cast< ResultsDeviceDetection * >(argp1);
  {
    try {
      result = (arg1)->getDeviceId();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsDeviceDetectionSwig_getUserAgent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsDeviceDetection *arg1 = (ResultsDeviceDetection *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ResultsDeviceDetectionSwig_getUserAgent.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsDeviceDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsDeviceDetectionSwig_getUserAgent" "', argument " "1"" of type '" "ResultsDeviceDetection *""'"); 
  }
  arg1 = reinterpret_cast< ResultsDeviceDetection * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ResultsDeviceDetectionSwig_getUserAgent" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (arg1)->getUserAgent(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsDeviceDetectionSwig_getUserAgents(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsDeviceDetection *arg1 = (ResultsDeviceDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ResultsDeviceDetectionSwig_getUserAgents.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsDeviceDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsDeviceDetectionSwig_getUserAgents" "', argument " "1"" of type '" "ResultsDeviceDetection *""'"); 
  }
  arg1 = reinterpret_cast< ResultsDeviceDetection * >(argp1);
  {
    try {
      result = (int)(arg1)->getUserAgents();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ResultsDeviceDetectionSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ResultsDeviceDetectionSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ResultsDeviceDetectionSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_ResultsDeviceDetectionSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_ResultsDeviceDetectionSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            ResultsDeviceDetection * arg1 = (ResultsDeviceDetection *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_veto_ResultsDeviceDetectionSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class ResultsDeviceDetectionSwig can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ResultsHashSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ResultsHashSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ResultsHashSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_ResultsHashSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_ResultsHashSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            ResultsHash * arg1 = (ResultsHash *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_ResultsHashSwig_getDeviceId__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsHashSwig_getDeviceId" "', argument " "1"" of type '" "ResultsHash *""'"); 
  }
  arg1 = reinterpret_cast< ResultsHash * >(argp1);
  {
    try {
      result = (arg1)->getDeviceId();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsHashSwig_getDeviceId__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsHashSwig_getDeviceId" "', argument " "1"" of type '" "ResultsHash *""'"); 
  }
  arg1 = reinterpret_cast< ResultsHash * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ResultsHashSwig_getDeviceId" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (arg1)->getDeviceId(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsHashSwig__wrap_ResultsHashSwig_getDeviceId(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsHashSwig_getDeviceId__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsHashSwig_getDeviceId__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsHashSwig_getDeviceId__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsHashSwig_getDeviceId__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getDeviceId.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsHashSwig_getDifference__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsHashSwig_getDifference" "', argument " "1"" of type '" "ResultsHash *""'"); 
  }
  arg1 = reinterpret_cast< ResultsHash * >(argp1);
  {
    try {
      result = (int)(arg1)->getDifference();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsHashSwig_getDifference__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsHashSwig_getDifference" "', argument " "1"" of type '" "ResultsHash *""'"); 
  }
  arg1 = reinterpret_cast< ResultsHash * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ResultsHashSwig_getDifference" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (int)(arg1)->getDifference(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsHashSwig__wrap_ResultsHashSwig_getDifference(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsHashSwig_getDifference__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsHashSwig_getDifference__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsHashSwig_getDifference__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsHashSwig_getDifference__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getDifference.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsHashSwig_getMethod__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsHashSwig_getMethod" "', argument " "1"" of type '" "ResultsHash *""'"); 
  }
  arg1 = reinterpret_cast< ResultsHash * >(argp1);
  {
    try {
      result = (int)(arg1)->getMethod();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsHashSwig_getMethod__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsHashSwig_getMethod" "', argument " "1"" of type '" "ResultsHash *""'"); 
  }
  arg1 = reinterpret_cast< ResultsHash * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ResultsHashSwig_getMethod" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (int)(arg1)->getMethod(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsHashSwig__wrap_ResultsHashSwig_getMethod(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsHashSwig_getMethod__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsHashSwig_getMethod__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsHashSwig_getMethod__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsHashSwig_getMethod__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getMethod.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsHashSwig_getDrift__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsHashSwig_getDrift" "', argument " "1"" of type '" "ResultsHash *""'"); 
  }
  arg1 = reinterpret_cast< ResultsHash * >(argp1);
  {
    try {
      result = (int)(arg1)->getDrift();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsHashSwig_getDrift__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsHashSwig_getDrift" "', argument " "1"" of type '" "ResultsHash *""'"); 
  }
  arg1 = reinterpret_cast< ResultsHash * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ResultsHashSwig_getDrift" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (int)(arg1)->getDrift(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsHashSwig__wrap_ResultsHashSwig_getDrift(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsHashSwig_getDrift__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsHashSwig_getDrift__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ResultsHashSwig_getDrift__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ResultsHashSwig_getDrift__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getDrift.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsHashSwig_getTrace(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ResultsHashSwig_getTrace.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsHashSwig_getTrace" "', argument " "1"" of type '" "ResultsHash *""'"); 
  }
  arg1 = reinterpret_cast< ResultsHash * >(argp1);
  {
    try {
      result = (arg1)->getTrace();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsHashSwig_getMatchedNodes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ResultsHashSwig_getMatchedNodes.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsHashSwig_getMatchedNodes" "', argument " "1"" of type '" "ResultsHash *""'"); 
  }
  arg1 = reinterpret_cast< ResultsHash * >(argp1);
  {
    try {
      result = (int)(arg1)->getMatchedNodes();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsHashSwig_getIterations(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ResultsHashSwig_getIterations.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsHashSwig_getIterations" "', argument " "1"" of type '" "ResultsHash *""'"); 
  }
  arg1 = reinterpret_cast< ResultsHash * >(argp1);
  {
    try {
      result = (int)(arg1)->getIterations();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsHashSwig_getUserAgent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ResultsHashSwig_getUserAgent.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsHashSwig_getUserAgent" "', argument " "1"" of type '" "ResultsHash *""'"); 
  }
  arg1 = reinterpret_cast< ResultsHash * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ResultsHashSwig_getUserAgent" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      result = (arg1)->getUserAgent(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ResultsHashSwig_getUserAgents(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ResultsHash *arg1 = (ResultsHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ResultsHashSwig_getUserAgents.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ResultsHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResultsHashSwig_getUserAgents" "', argument " "1"" of type '" "ResultsHash *""'"); 
  }
  arg1 = reinterpret_cast< ResultsHash * >(argp1);
  {
    try {
      result = (int)(arg1)->getUserAgents();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_ResultsHashSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class ResultsHashSwig can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_CollectionConfigSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  CollectionConfig *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_CollectionConfigSwig.");
  {
    try {
      result = (CollectionConfig *)new CollectionConfig();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_CollectionConfig, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CollectionConfigSwig_setCapacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CollectionConfigSwig_setCapacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionConfigSwig_setCapacity" "', argument " "1"" of type '" "CollectionConfig *""'"); 
  }
  arg1 = reinterpret_cast< CollectionConfig * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CollectionConfigSwig_setCapacity" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      (arg1)->setCapacity(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CollectionConfigSwig_setConcurrency(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CollectionConfigSwig_setConcurrency.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionConfigSwig_setConcurrency" "', argument " "1"" of type '" "CollectionConfig *""'"); 
  }
  arg1 = reinterpret_cast< CollectionConfig * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CollectionConfigSwig_setConcurrency" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->setConcurrency(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CollectionConfigSwig_setLoaded(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CollectionConfigSwig_setLoaded.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionConfigSwig_setLoaded" "', argument " "1"" of type '" "CollectionConfig *""'"); 
  }
  arg1 = reinterpret_cast< CollectionConfig * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CollectionConfigSwig_setLoaded" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try {
      (arg1)->setLoaded(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CollectionConfigSwig_getCapacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CollectionConfigSwig_getCapacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionConfigSwig_getCapacity" "', argument " "1"" of type '" "CollectionConfig *""'"); 
  }
  arg1 = reinterpret_cast< CollectionConfig * >(argp1);
  {
    try {
      result = (uint32_t)(arg1)->getCapacity();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CollectionConfigSwig_getConcurrency(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CollectionConfigSwig_getConcurrency.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionConfigSwig_getConcurrency" "', argument " "1"" of type '" "CollectionConfig *""'"); 
  }
  arg1 = reinterpret_cast< CollectionConfig * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->getConcurrency();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CollectionConfigSwig_getLoaded(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  CollectionConfig *arg1 = (CollectionConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CollectionConfigSwig_getLoaded.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_CollectionConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CollectionConfigSwig_getLoaded" "', argument " "1"" of type '" "CollectionConfig *""'"); 
  }
  arg1 = reinterpret_cast< CollectionConfig * >(argp1);
  {
    try {
      result = (uint32_t)(arg1)->getLoaded();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_CollectionConfigSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_CollectionConfigSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_CollectionConfigSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_CollectionConfigSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_CollectionConfigSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            CollectionConfig * arg1 = (CollectionConfig *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_ConfigHashSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  ConfigHash *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ConfigHashSwig.");
  {
    try {
      result = (ConfigHash *)new ConfigHash();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ConfigHash, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_setHighPerformance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_setHighPerformance.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_setHighPerformance" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  {
    try {
      (arg1)->setHighPerformance();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_setBalanced(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_setBalanced.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_setBalanced" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  {
    try {
      (arg1)->setBalanced();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_setBalancedTemp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_setBalancedTemp.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_setBalancedTemp" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  {
    try {
      (arg1)->setBalancedTemp();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_setLowMemory(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_setLowMemory.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_setLowMemory" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  {
    try {
      (arg1)->setLowMemory();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_setMaxPerformance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_setMaxPerformance.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_setMaxPerformance" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  {
    try {
      (arg1)->setMaxPerformance();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_setDrift(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_setDrift.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_setDrift" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigHashSwig_setDrift" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  {
    try {
      (arg1)->setDrift(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_setDifference(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_setDifference.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_setDifference" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigHashSwig_setDifference" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  {
    try {
      (arg1)->setDifference(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_setConcurrency(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_setConcurrency.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_setConcurrency" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigHashSwig_setConcurrency" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  {
    try {
      (arg1)->setConcurrency(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_setUsePerformanceGraph(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_setUsePerformanceGraph.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_setUsePerformanceGraph" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigHashSwig_setUsePerformanceGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setUsePerformanceGraph(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_setUsePredictiveGraph(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_setUsePredictiveGraph.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_setUsePredictiveGraph" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigHashSwig_setUsePredictiveGraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setUsePredictiveGraph(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_setTraceRoute(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_setTraceRoute.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_setTraceRoute" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigHashSwig_setTraceRoute" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setTraceRoute(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_getStrings(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CollectionConfig result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_getStrings.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_getStrings" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  {
    try {
      result = (arg1)->getStrings();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new CollectionConfig(static_cast< const CollectionConfig& >(result))), SWIGTYPE_p_CollectionConfig, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_getProperties(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CollectionConfig result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_getProperties.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_getProperties" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  {
    try {
      result = (arg1)->getProperties();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new CollectionConfig(static_cast< const CollectionConfig& >(result))), SWIGTYPE_p_CollectionConfig, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_getValues(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CollectionConfig result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_getValues.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_getValues" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  {
    try {
      result = (arg1)->getValues();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new CollectionConfig(static_cast< const CollectionConfig& >(result))), SWIGTYPE_p_CollectionConfig, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_getProfiles(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CollectionConfig result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_getProfiles.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_getProfiles" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  {
    try {
      result = (arg1)->getProfiles();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new CollectionConfig(static_cast< const CollectionConfig& >(result))), SWIGTYPE_p_CollectionConfig, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_getNodes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CollectionConfig result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_getNodes.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_getNodes" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  {
    try {
      result = (arg1)->getNodes();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new CollectionConfig(static_cast< const CollectionConfig& >(result))), SWIGTYPE_p_CollectionConfig, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_getProfileOffsets(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CollectionConfig result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_getProfileOffsets.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_getProfileOffsets" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  {
    try {
      result = (arg1)->getProfileOffsets();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new CollectionConfig(static_cast< const CollectionConfig& >(result))), SWIGTYPE_p_CollectionConfig, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_getDrift(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_getDrift.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_getDrift" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  {
    try {
      result = (int)(arg1)->getDrift();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_getDifference(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_getDifference.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_getDifference" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  {
    try {
      result = (int)(arg1)->getDifference();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_getUsePerformanceGraph(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_getUsePerformanceGraph.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_getUsePerformanceGraph" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  {
    try {
      result = (bool)(arg1)->getUsePerformanceGraph();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_getUsePredictiveGraph(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_getUsePredictiveGraph.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_getUsePredictiveGraph" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  {
    try {
      result = (bool)(arg1)->getUsePredictiveGraph();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_getConcurrency(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_getConcurrency.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_getConcurrency" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  {
    try {
      result = (uint16_t)(arg1)->getConcurrency();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConfigHashSwig_getTraceRoute(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  ConfigHash *arg1 = (ConfigHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConfigHashSwig_getTraceRoute.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigHashSwig_getTraceRoute" "', argument " "1"" of type '" "ConfigHash *""'"); 
  }
  arg1 = reinterpret_cast< ConfigHash * >(argp1);
  {
    try {
      result = (bool)(arg1)->getTraceRoute();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ConfigHashSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ConfigHashSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ConfigHashSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_ConfigHashSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_ConfigHashSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            ConfigHash * arg1 = (ConfigHash *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_EngineHashSwig__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  std::string *arg1 = 0 ;
  ConfigHash *arg2 = (ConfigHash *) 0 ;
  RequiredPropertiesConfig *arg3 = (RequiredPropertiesConfig *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  EngineHash *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_EngineHashSwig__SWIG_0.");
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EngineHashSwig" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EngineHashSwig" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_EngineHashSwig" "', argument " "2"" of type '" "ConfigHash *""'"); 
  }
  arg2 = reinterpret_cast< ConfigHash * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_RequiredPropertiesConfig, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_EngineHashSwig" "', argument " "3"" of type '" "RequiredPropertiesConfig *""'"); 
  }
  arg3 = reinterpret_cast< RequiredPropertiesConfig * >(argp3);
  {
    try {
      result = (EngineHash *)new EngineHash((std::string const &)*arg1,arg2,arg3);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_EngineHash, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_EngineHashSwig__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  unsigned char *arg1 ;
  long arg2 ;
  ConfigHash *arg3 = (ConfigHash *) 0 ;
  RequiredPropertiesConfig *arg4 = (RequiredPropertiesConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  EngineHash *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_EngineHashSwig__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EngineHashSwig" "', argument " "1"" of type '" "unsigned char []""'"); 
  } 
  arg1 = reinterpret_cast< unsigned char * >(argp1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_EngineHashSwig" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3,SWIGTYPE_p_ConfigHash, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_EngineHashSwig" "', argument " "3"" of type '" "ConfigHash *""'"); 
  }
  arg3 = reinterpret_cast< ConfigHash * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4,SWIGTYPE_p_RequiredPropertiesConfig, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_EngineHashSwig" "', argument " "4"" of type '" "RequiredPropertiesConfig *""'"); 
  }
  arg4 = reinterpret_cast< RequiredPropertiesConfig * >(argp4);
  {
    try {
      result = (EngineHash *)new EngineHash(arg1,arg2,arg3,arg4);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_EngineHash, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_EngineHashSwig(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  SWIGV8_VALUE self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_EngineHashSwig__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    } else {
      goto fail;
    }
#else
    _wrap_new_EngineHashSwig__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    } else {
      goto fail;
    }
#endif
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_EngineHashSwig__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    } else {
      goto fail;
    }
#else
    _wrap_new_EngineHashSwig__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    } else {
      goto fail;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_EngineHashSwig");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineHashSwig_getPublishedTime(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineHash *arg1 = (EngineHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Date result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineHashSwig_getPublishedTime.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineHashSwig_getPublishedTime" "', argument " "1"" of type '" "EngineHash *""'"); 
  }
  arg1 = reinterpret_cast< EngineHash * >(argp1);
  {
    try {
      result = (arg1)->getPublishedTime();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new Date(static_cast< const Date& >(result))), SWIGTYPE_p_Date, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineHashSwig_getUpdateAvailableTime(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineHash *arg1 = (EngineHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Date result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineHashSwig_getUpdateAvailableTime.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineHashSwig_getUpdateAvailableTime" "', argument " "1"" of type '" "EngineHash *""'"); 
  }
  arg1 = reinterpret_cast< EngineHash * >(argp1);
  {
    try {
      result = (arg1)->getUpdateAvailableTime();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new Date(static_cast< const Date& >(result))), SWIGTYPE_p_Date, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineHashSwig_getDataFilePath(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineHash *arg1 = (EngineHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineHashSwig_getDataFilePath.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineHashSwig_getDataFilePath" "', argument " "1"" of type '" "EngineHash *""'"); 
  }
  arg1 = reinterpret_cast< EngineHash * >(argp1);
  {
    try {
      result = (arg1)->getDataFilePath();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineHashSwig_getDataFileTempPath(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineHash *arg1 = (EngineHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineHashSwig_getDataFileTempPath.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineHashSwig_getDataFileTempPath" "', argument " "1"" of type '" "EngineHash *""'"); 
  }
  arg1 = reinterpret_cast< EngineHash * >(argp1);
  {
    try {
      result = (arg1)->getDataFileTempPath();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineHashSwig_refreshData__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineHash *arg1 = (EngineHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineHashSwig_refreshData" "', argument " "1"" of type '" "EngineHash *""'"); 
  }
  arg1 = reinterpret_cast< EngineHash * >(argp1);
  {
    try {
      (arg1)->refreshData();;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineHashSwig_refreshData__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineHash *arg1 = (EngineHash *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineHashSwig_refreshData" "', argument " "1"" of type '" "EngineHash *""'"); 
  }
  arg1 = reinterpret_cast< EngineHash * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EngineHashSwig_refreshData" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->refreshData((char const *)arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineHashSwig_refreshData__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineHash *arg1 = (EngineHash *) 0 ;
  unsigned char *arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineHashSwig_refreshData" "', argument " "1"" of type '" "EngineHash *""'"); 
  }
  arg1 = reinterpret_cast< EngineHash * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EngineHashSwig_refreshData" "', argument " "2"" of type '" "unsigned char []""'"); 
  } 
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  ecode3 = SWIG_AsVal_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EngineHashSwig_refreshData" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (arg1)->refreshData(arg2,arg3);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineHashSwig__wrap_EngineHashSwig_refreshData(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EngineHashSwig_refreshData__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EngineHashSwig_refreshData__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EngineHashSwig_refreshData__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EngineHashSwig_refreshData__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EngineHashSwig_refreshData__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EngineHashSwig_refreshData__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function refreshData.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineHashSwig_process__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineHash *arg1 = (EngineHash *) 0 ;
  EvidenceDeviceDetection *arg2 = (EvidenceDeviceDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ResultsHash *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineHashSwig_process" "', argument " "1"" of type '" "EngineHash *""'"); 
  }
  arg1 = reinterpret_cast< EngineHash * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_EvidenceDeviceDetection, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EngineHashSwig_process" "', argument " "2"" of type '" "EvidenceDeviceDetection *""'"); 
  }
  arg2 = reinterpret_cast< EvidenceDeviceDetection * >(argp2);
  {
    try {
      result = (ResultsHash *)(arg1)->process(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ResultsHash, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineHashSwig_process__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineHash *arg1 = (EngineHash *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  ResultsHash *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineHashSwig_process" "', argument " "1"" of type '" "EngineHash *""'"); 
  }
  arg1 = reinterpret_cast< EngineHash * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EngineHashSwig_process" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (ResultsHash *)(arg1)->process((char const *)arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ResultsHash, SWIG_POINTER_OWN |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineHashSwig__wrap_EngineHashSwig_process(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EngineHashSwig_process__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EngineHashSwig_process__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EngineHashSwig_process__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EngineHashSwig_process__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function process.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineHashSwig_processBase(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineHash *arg1 = (EngineHash *) 0 ;
  EvidenceBase *arg2 = (EvidenceBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ResultsBase *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EngineHashSwig_processBase.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineHashSwig_processBase" "', argument " "1"" of type '" "EngineHash *""'"); 
  }
  arg1 = reinterpret_cast< EngineHash * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_EvidenceBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EngineHashSwig_processBase" "', argument " "2"" of type '" "EvidenceBase *""'"); 
  }
  arg2 = reinterpret_cast< EvidenceBase * >(argp2);
  {
    try {
      result = (ResultsBase *)(arg1)->processBase(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ResultsBase, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineHashSwig_processDeviceDetection__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineHash *arg1 = (EngineHash *) 0 ;
  EvidenceDeviceDetection *arg2 = (EvidenceDeviceDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ResultsDeviceDetection *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineHashSwig_processDeviceDetection" "', argument " "1"" of type '" "EngineHash *""'"); 
  }
  arg1 = reinterpret_cast< EngineHash * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_EvidenceDeviceDetection, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EngineHashSwig_processDeviceDetection" "', argument " "2"" of type '" "EvidenceDeviceDetection *""'"); 
  }
  arg2 = reinterpret_cast< EvidenceDeviceDetection * >(argp2);
  {
    try {
      result = (ResultsDeviceDetection *)(arg1)->processDeviceDetection(arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ResultsDeviceDetection, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineHashSwig_processDeviceDetection__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  EngineHash *arg1 = (EngineHash *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  ResultsDeviceDetection *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_EngineHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EngineHashSwig_processDeviceDetection" "', argument " "1"" of type '" "EngineHash *""'"); 
  }
  arg1 = reinterpret_cast< EngineHash * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EngineHashSwig_processDeviceDetection" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (ResultsDeviceDetection *)(arg1)->processDeviceDetection((char const *)arg2);;
    }
    catch(FatalException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NotImplementedException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(InvalidPropertyException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(EvidenceException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(TooManyValuesException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(NoValuesAvailableException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }	
    catch(StatusCodeException& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(runtime_error& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ResultsDeviceDetection, SWIG_POINTER_OWN |  0 );
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EngineHashSwig__wrap_EngineHashSwig_processDeviceDetection(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EngineHashSwig_processDeviceDetection__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EngineHashSwig_processDeviceDetection__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EngineHashSwig_processDeviceDetection__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EngineHashSwig_processDeviceDetection__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function processDeviceDetection.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_EngineHashSwig(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_EngineHashSwig(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_EngineHashSwig(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_EngineHashSwig(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_EngineHashSwig(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            EngineHash * arg1 = (EngineHash *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_EvidenceDeviceDetectionTo_p_EvidenceBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EvidenceBase *)  ((EvidenceDeviceDetection *) x));
}
static void *_p_ConfigHashTo_p_ConfigBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ConfigBase *) (ConfigDeviceDetection *) ((ConfigHash *) x));
}
static void *_p_ConfigDeviceDetectionTo_p_ConfigBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ConfigBase *)  ((ConfigDeviceDetection *) x));
}
static void *_p_EvidenceBaseTo_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::map< std::string,std::string,std::less< std::string > > *)  ((EvidenceBase *) x));
}
static void *_p_EvidenceDeviceDetectionTo_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::map< std::string,std::string,std::less< std::string > > *) (EvidenceBase *) ((EvidenceDeviceDetection *) x));
}
static void *_p_EngineHashTo_p_EngineBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EngineBase *) (EngineDeviceDetection *) ((EngineHash *) x));
}
static void *_p_EngineDeviceDetectionTo_p_EngineBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EngineBase *)  ((EngineDeviceDetection *) x));
}
static void *_p_EngineHashTo_p_EngineDeviceDetection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EngineDeviceDetection *)  ((EngineHash *) x));
}
static void *_p_ConfigHashTo_p_ConfigDeviceDetection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ConfigDeviceDetection *)  ((ConfigHash *) x));
}
static void *_p_ResultsHashTo_p_ResultsDeviceDetection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ResultsDeviceDetection *)  ((ResultsHash *) x));
}
static void *_p_ResultsHashTo_p_ResultsBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ResultsBase *) (ResultsDeviceDetection *) ((ResultsHash *) x));
}
static void *_p_ResultsDeviceDetectionTo_p_ResultsBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ResultsBase *)  ((ResultsDeviceDetection *) x));
}
static swig_type_info _swigt__p_CollectionConfig = {"_p_CollectionConfig", "CollectionConfig *|p_CollectionConfig", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CollectionT_ValueMetaDataKey_ValueMetaData_t = {"_p_CollectionT_ValueMetaDataKey_ValueMetaData_t", "Collection< ValueMetaDataKey,ValueMetaData > *|p_CollectionT_ValueMetaDataKey_ValueMetaData_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CollectionT_byte_ComponentMetaData_t = {"_p_CollectionT_byte_ComponentMetaData_t", "Collection< byte,ComponentMetaData > *|p_CollectionT_byte_ComponentMetaData_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CollectionT_std__string_PropertyMetaData_t = {"_p_CollectionT_std__string_PropertyMetaData_t", "Collection< std::string,PropertyMetaData > *|p_CollectionT_std__string_PropertyMetaData_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CollectionT_uint32_t_ProfileMetaData_t = {"_p_CollectionT_uint32_t_ProfileMetaData_t", "Collection< uint32_t,ProfileMetaData > *|p_CollectionT_uint32_t_ProfileMetaData_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ComponentMetaData = {"_p_ComponentMetaData", "ComponentMetaData *|p_ComponentMetaData", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConfigBase = {"_p_ConfigBase", "ConfigBase *|p_ConfigBase", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConfigDeviceDetection = {"_p_ConfigDeviceDetection", "ConfigDeviceDetection *|p_ConfigDeviceDetection", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConfigHash = {"_p_ConfigHash", "p_ConfigHash|ConfigHash *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Date = {"_p_Date", "p_Date|Date *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EngineBase = {"_p_EngineBase", "p_EngineBase|EngineBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EngineDeviceDetection = {"_p_EngineDeviceDetection", "EngineDeviceDetection *|p_EngineDeviceDetection", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EngineHash = {"_p_EngineHash", "EngineHash *|p_EngineHash", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EvidenceBase = {"_p_EvidenceBase", "p_EvidenceBase|EvidenceBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EvidenceDeviceDetection = {"_p_EvidenceDeviceDetection", "EvidenceDeviceDetection *|p_EvidenceDeviceDetection", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetaData = {"_p_MetaData", "MetaData *|p_MetaData", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ProfileMetaData = {"_p_ProfileMetaData", "ProfileMetaData *|p_ProfileMetaData", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PropertyMetaData = {"_p_PropertyMetaData", "PropertyMetaData *|p_PropertyMetaData", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RequiredPropertiesConfig = {"_p_RequiredPropertiesConfig", "RequiredPropertiesConfig *|p_RequiredPropertiesConfig", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ResultsBase = {"_p_ResultsBase", "ResultsBase *|p_ResultsBase", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ResultsDeviceDetection = {"_p_ResultsDeviceDetection", "ResultsDeviceDetection *|p_ResultsDeviceDetection", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ResultsHash = {"_p_ResultsHash", "p_ResultsHash|ResultsHash *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueMetaData = {"_p_ValueMetaData", "ValueMetaData *|p_ValueMetaData", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueMetaDataKey = {"_p_ValueMetaDataKey", "p_ValueMetaDataKey|ValueMetaDataKey *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueT_bool_t = {"_p_ValueT_bool_t", "Value< bool > *|p_ValueT_bool_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueT_double_t = {"_p_ValueT_double_t", "p_ValueT_double_t|Value< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueT_int_t = {"_p_ValueT_int_t", "p_ValueT_int_t|Value< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueT_std__string_t = {"_p_ValueT_std__string_t", "p_ValueT_std__string_t|Value< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueT_std__vectorT_std__string_t_t = {"_p_ValueT_std__vectorT_std__string_t_t", "Value< std::vector< std::string > > *|p_ValueT_std__vectorT_std__string_t_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_byte = {"_p_byte", "byte *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_t = {"_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t", "p_std__mapT_std__string_std__string_std__lessT_std__string_t_t|std::map< std::string,std::string > *|std::map< std::string,std::string,std::less< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "p_std__vectorT_std__string_t|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CollectionConfig,
  &_swigt__p_CollectionT_ValueMetaDataKey_ValueMetaData_t,
  &_swigt__p_CollectionT_byte_ComponentMetaData_t,
  &_swigt__p_CollectionT_std__string_PropertyMetaData_t,
  &_swigt__p_CollectionT_uint32_t_ProfileMetaData_t,
  &_swigt__p_ComponentMetaData,
  &_swigt__p_ConfigBase,
  &_swigt__p_ConfigDeviceDetection,
  &_swigt__p_ConfigHash,
  &_swigt__p_Date,
  &_swigt__p_EngineBase,
  &_swigt__p_EngineDeviceDetection,
  &_swigt__p_EngineHash,
  &_swigt__p_EvidenceBase,
  &_swigt__p_EvidenceDeviceDetection,
  &_swigt__p_MetaData,
  &_swigt__p_ProfileMetaData,
  &_swigt__p_PropertyMetaData,
  &_swigt__p_RequiredPropertiesConfig,
  &_swigt__p_ResultsBase,
  &_swigt__p_ResultsDeviceDetection,
  &_swigt__p_ResultsHash,
  &_swigt__p_ValueMetaData,
  &_swigt__p_ValueMetaDataKey,
  &_swigt__p_ValueT_bool_t,
  &_swigt__p_ValueT_double_t,
  &_swigt__p_ValueT_int_t,
  &_swigt__p_ValueT_std__string_t,
  &_swigt__p_ValueT_std__vectorT_std__string_t_t,
  &_swigt__p_byte,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_int,
  &_swigt__p_key_type,
  &_swigt__p_long_long,
  &_swigt__p_mapped_type,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_CollectionConfig[] = {  {&_swigt__p_CollectionConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollectionT_ValueMetaDataKey_ValueMetaData_t[] = {  {&_swigt__p_CollectionT_ValueMetaDataKey_ValueMetaData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollectionT_byte_ComponentMetaData_t[] = {  {&_swigt__p_CollectionT_byte_ComponentMetaData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollectionT_std__string_PropertyMetaData_t[] = {  {&_swigt__p_CollectionT_std__string_PropertyMetaData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollectionT_uint32_t_ProfileMetaData_t[] = {  {&_swigt__p_CollectionT_uint32_t_ProfileMetaData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComponentMetaData[] = {  {&_swigt__p_ComponentMetaData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConfigBase[] = {  {&_swigt__p_ConfigHash, _p_ConfigHashTo_p_ConfigBase, 0, 0},  {&_swigt__p_ConfigBase, 0, 0, 0},  {&_swigt__p_ConfigDeviceDetection, _p_ConfigDeviceDetectionTo_p_ConfigBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConfigDeviceDetection[] = {  {&_swigt__p_ConfigHash, _p_ConfigHashTo_p_ConfigDeviceDetection, 0, 0},  {&_swigt__p_ConfigDeviceDetection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConfigHash[] = {  {&_swigt__p_ConfigHash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Date[] = {  {&_swigt__p_Date, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EngineBase[] = {  {&_swigt__p_EngineBase, 0, 0, 0},  {&_swigt__p_EngineHash, _p_EngineHashTo_p_EngineBase, 0, 0},  {&_swigt__p_EngineDeviceDetection, _p_EngineDeviceDetectionTo_p_EngineBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EngineDeviceDetection[] = {  {&_swigt__p_EngineHash, _p_EngineHashTo_p_EngineDeviceDetection, 0, 0},  {&_swigt__p_EngineDeviceDetection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EngineHash[] = {  {&_swigt__p_EngineHash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EvidenceBase[] = {  {&_swigt__p_EvidenceBase, 0, 0, 0},  {&_swigt__p_EvidenceDeviceDetection, _p_EvidenceDeviceDetectionTo_p_EvidenceBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EvidenceDeviceDetection[] = {  {&_swigt__p_EvidenceDeviceDetection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetaData[] = {  {&_swigt__p_MetaData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ProfileMetaData[] = {  {&_swigt__p_ProfileMetaData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PropertyMetaData[] = {  {&_swigt__p_PropertyMetaData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RequiredPropertiesConfig[] = {  {&_swigt__p_RequiredPropertiesConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ResultsBase[] = {  {&_swigt__p_ResultsHash, _p_ResultsHashTo_p_ResultsBase, 0, 0},  {&_swigt__p_ResultsBase, 0, 0, 0},  {&_swigt__p_ResultsDeviceDetection, _p_ResultsDeviceDetectionTo_p_ResultsBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ResultsDeviceDetection[] = {  {&_swigt__p_ResultsHash, _p_ResultsHashTo_p_ResultsDeviceDetection, 0, 0},  {&_swigt__p_ResultsDeviceDetection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ResultsHash[] = {  {&_swigt__p_ResultsHash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueMetaData[] = {  {&_swigt__p_ValueMetaData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueMetaDataKey[] = {  {&_swigt__p_ValueMetaDataKey, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueT_bool_t[] = {  {&_swigt__p_ValueT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueT_double_t[] = {  {&_swigt__p_ValueT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueT_int_t[] = {  {&_swigt__p_ValueT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueT_std__string_t[] = {  {&_swigt__p_ValueT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueT_std__vectorT_std__string_t_t[] = {  {&_swigt__p_ValueT_std__vectorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_byte[] = {  {&_swigt__p_byte, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_t[] = {  {&_swigt__p_EvidenceBase, _p_EvidenceBaseTo_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t, 0, 0},  {&_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_t, 0, 0, 0},  {&_swigt__p_EvidenceDeviceDetection, _p_EvidenceDeviceDetectionTo_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CollectionConfig,
  _swigc__p_CollectionT_ValueMetaDataKey_ValueMetaData_t,
  _swigc__p_CollectionT_byte_ComponentMetaData_t,
  _swigc__p_CollectionT_std__string_PropertyMetaData_t,
  _swigc__p_CollectionT_uint32_t_ProfileMetaData_t,
  _swigc__p_ComponentMetaData,
  _swigc__p_ConfigBase,
  _swigc__p_ConfigDeviceDetection,
  _swigc__p_ConfigHash,
  _swigc__p_Date,
  _swigc__p_EngineBase,
  _swigc__p_EngineDeviceDetection,
  _swigc__p_EngineHash,
  _swigc__p_EvidenceBase,
  _swigc__p_EvidenceDeviceDetection,
  _swigc__p_MetaData,
  _swigc__p_ProfileMetaData,
  _swigc__p_PropertyMetaData,
  _swigc__p_RequiredPropertiesConfig,
  _swigc__p_ResultsBase,
  _swigc__p_ResultsDeviceDetection,
  _swigc__p_ResultsHash,
  _swigc__p_ValueMetaData,
  _swigc__p_ValueMetaDataKey,
  _swigc__p_ValueT_bool_t,
  _swigc__p_ValueT_double_t,
  _swigc__p_ValueT_int_t,
  _swigc__p_ValueT_std__string_t,
  _swigc__p_ValueT_std__vectorT_std__string_t_t,
  _swigc__p_byte,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_int,
  _swigc__p_key_type,
  _swigc__p_long_long,
  _swigc__p_mapped_type,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




SWIGRUNTIME void
SWIG_V8_SetModule(void *, swig_module_info *swig_module) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::External> mod = SWIGV8_EXTERNAL_NEW(swig_module);
  assert(!mod.IsEmpty());
#if (V8_MAJOR_VERSION-0) < 5
  global_obj->SetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"), mod);
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("swig_module_info_data"));
  global_obj->SetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey, mod);
#endif
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void *) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
#if (V8_MAJOR_VERSION-0) < 5
  v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("swig_module_info_data"));
  v8::Local<v8::Value> moduleinfo;
  if (!global_obj->GetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey).ToLocal(&moduleinfo))
    return 0;
#endif

  if (moduleinfo.IsEmpty() || moduleinfo->IsNull() || moduleinfo->IsUndefined())
  {
    // It's not yet loaded
    return 0;
  }

  v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);

  if (moduleinfo_extern.IsEmpty() || moduleinfo_extern->IsNull() || moduleinfo_extern->IsUndefined())
  {
    // Something's not right
    return 0;
  }

  void *ptr = moduleinfo_extern->Value();
  assert(ptr);
  swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
  assert(retptr);
  return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


// Note: 'extern "C"'' disables name mangling which makes it easier to load the symbol manually
// TODO: is it ok to do that?
extern "C"
#if (NODE_MODULE_VERSION < 0x000C)
void SWIGV8_INIT (SWIGV8_OBJECT exports)
#else
void SWIGV8_INIT (SWIGV8_OBJECT exports, SWIGV8_OBJECT /*module*/)
#endif
{
  SWIG_InitializeModule(static_cast<void *>(&exports));

  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT exports_obj = exports;


  // a class template for creating proxies of undefined types
  SWIGV8_SET_CLASS_TEMPL(SWIGV8_SWIGTYPE_Proxy_class_templ, SWIGV8_CreateClassTemplate("SwigProxy"));

  /* create objects for namespaces */
  

  /* create class templates */
  /* Name: _exports_MapStringStringSwig, Type: p_std__mapT_std__string_std__string_std__lessT_std__string_t_t, Dtor: _wrap_delete_MapStringStringSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_MapStringStringSwig_class = SWIGV8_CreateClassTemplate("_exports_MapStringStringSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_MapStringStringSwig_clientData.class_templ, _exports_MapStringStringSwig_class);
_exports_MapStringStringSwig_clientData.dtor = _wrap_delete_MapStringStringSwig;
if (SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t->clientdata == 0) {
  SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t->clientdata = &_exports_MapStringStringSwig_clientData;
}
/* Name: _exports_VectorStringSwig, Type: p_std__vectorT_std__string_t, Dtor: _wrap_delete_VectorStringSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_VectorStringSwig_class = SWIGV8_CreateClassTemplate("_exports_VectorStringSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_VectorStringSwig_clientData.class_templ, _exports_VectorStringSwig_class);
_exports_VectorStringSwig_clientData.dtor = _wrap_delete_VectorStringSwig;
if (SWIGTYPE_p_std__vectorT_std__string_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_std__string_t->clientdata = &_exports_VectorStringSwig_clientData;
}
/* Name: _exports_RequiredPropertiesConfigSwig, Type: p_RequiredPropertiesConfig, Dtor: _wrap_delete_RequiredPropertiesConfigSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_RequiredPropertiesConfigSwig_class = SWIGV8_CreateClassTemplate("_exports_RequiredPropertiesConfigSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_RequiredPropertiesConfigSwig_clientData.class_templ, _exports_RequiredPropertiesConfigSwig_class);
_exports_RequiredPropertiesConfigSwig_clientData.dtor = _wrap_delete_RequiredPropertiesConfigSwig;
if (SWIGTYPE_p_RequiredPropertiesConfig->clientdata == 0) {
  SWIGTYPE_p_RequiredPropertiesConfig->clientdata = &_exports_RequiredPropertiesConfigSwig_clientData;
}
/* Name: _exports_StringValueSwig, Type: p_ValueT_std__string_t, Dtor: _wrap_delete_StringValueSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_StringValueSwig_class = SWIGV8_CreateClassTemplate("_exports_StringValueSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_StringValueSwig_clientData.class_templ, _exports_StringValueSwig_class);
_exports_StringValueSwig_clientData.dtor = _wrap_delete_StringValueSwig;
if (SWIGTYPE_p_ValueT_std__string_t->clientdata == 0) {
  SWIGTYPE_p_ValueT_std__string_t->clientdata = &_exports_StringValueSwig_clientData;
}
/* Name: _exports_BoolValueSwig, Type: p_ValueT_bool_t, Dtor: _wrap_delete_BoolValueSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_BoolValueSwig_class = SWIGV8_CreateClassTemplate("_exports_BoolValueSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_BoolValueSwig_clientData.class_templ, _exports_BoolValueSwig_class);
_exports_BoolValueSwig_clientData.dtor = _wrap_delete_BoolValueSwig;
if (SWIGTYPE_p_ValueT_bool_t->clientdata == 0) {
  SWIGTYPE_p_ValueT_bool_t->clientdata = &_exports_BoolValueSwig_clientData;
}
/* Name: _exports_IntegerValueSwig, Type: p_ValueT_int_t, Dtor: _wrap_delete_IntegerValueSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_IntegerValueSwig_class = SWIGV8_CreateClassTemplate("_exports_IntegerValueSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_IntegerValueSwig_clientData.class_templ, _exports_IntegerValueSwig_class);
_exports_IntegerValueSwig_clientData.dtor = _wrap_delete_IntegerValueSwig;
if (SWIGTYPE_p_ValueT_int_t->clientdata == 0) {
  SWIGTYPE_p_ValueT_int_t->clientdata = &_exports_IntegerValueSwig_clientData;
}
/* Name: _exports_VectorStringValuesSwig, Type: p_ValueT_std__vectorT_std__string_t_t, Dtor: _wrap_delete_VectorStringValuesSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_VectorStringValuesSwig_class = SWIGV8_CreateClassTemplate("_exports_VectorStringValuesSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_VectorStringValuesSwig_clientData.class_templ, _exports_VectorStringValuesSwig_class);
_exports_VectorStringValuesSwig_clientData.dtor = _wrap_delete_VectorStringValuesSwig;
if (SWIGTYPE_p_ValueT_std__vectorT_std__string_t_t->clientdata == 0) {
  SWIGTYPE_p_ValueT_std__vectorT_std__string_t_t->clientdata = &_exports_VectorStringValuesSwig_clientData;
}
/* Name: _exports_DoubleValueSwig, Type: p_ValueT_double_t, Dtor: _wrap_delete_DoubleValueSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_DoubleValueSwig_class = SWIGV8_CreateClassTemplate("_exports_DoubleValueSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_DoubleValueSwig_clientData.class_templ, _exports_DoubleValueSwig_class);
_exports_DoubleValueSwig_clientData.dtor = _wrap_delete_DoubleValueSwig;
if (SWIGTYPE_p_ValueT_double_t->clientdata == 0) {
  SWIGTYPE_p_ValueT_double_t->clientdata = &_exports_DoubleValueSwig_clientData;
}
/* Name: _exports_ResultsBaseSwig, Type: p_ResultsBase, Dtor: _wrap_delete_ResultsBaseSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_ResultsBaseSwig_class = SWIGV8_CreateClassTemplate("_exports_ResultsBaseSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_ResultsBaseSwig_clientData.class_templ, _exports_ResultsBaseSwig_class);
_exports_ResultsBaseSwig_clientData.dtor = _wrap_delete_ResultsBaseSwig;
if (SWIGTYPE_p_ResultsBase->clientdata == 0) {
  SWIGTYPE_p_ResultsBase->clientdata = &_exports_ResultsBaseSwig_clientData;
}
/* Name: _exports_Date, Type: p_Date, Dtor: _wrap_delete_Date */
SWIGV8_FUNCTION_TEMPLATE _exports_Date_class = SWIGV8_CreateClassTemplate("_exports_Date");
SWIGV8_SET_CLASS_TEMPL(_exports_Date_clientData.class_templ, _exports_Date_class);
_exports_Date_clientData.dtor = _wrap_delete_Date;
if (SWIGTYPE_p_Date->clientdata == 0) {
  SWIGTYPE_p_Date->clientdata = &_exports_Date_clientData;
}
/* Name: _exports_PropertyMetaDataSwig, Type: p_PropertyMetaData, Dtor: _wrap_delete_PropertyMetaDataSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_PropertyMetaDataSwig_class = SWIGV8_CreateClassTemplate("_exports_PropertyMetaDataSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_PropertyMetaDataSwig_clientData.class_templ, _exports_PropertyMetaDataSwig_class);
_exports_PropertyMetaDataSwig_clientData.dtor = _wrap_delete_PropertyMetaDataSwig;
if (SWIGTYPE_p_PropertyMetaData->clientdata == 0) {
  SWIGTYPE_p_PropertyMetaData->clientdata = &_exports_PropertyMetaDataSwig_clientData;
}
/* Name: _exports_ComponentMetaDataSwig, Type: p_ComponentMetaData, Dtor: _wrap_delete_ComponentMetaDataSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_ComponentMetaDataSwig_class = SWIGV8_CreateClassTemplate("_exports_ComponentMetaDataSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_ComponentMetaDataSwig_clientData.class_templ, _exports_ComponentMetaDataSwig_class);
_exports_ComponentMetaDataSwig_clientData.dtor = _wrap_delete_ComponentMetaDataSwig;
if (SWIGTYPE_p_ComponentMetaData->clientdata == 0) {
  SWIGTYPE_p_ComponentMetaData->clientdata = &_exports_ComponentMetaDataSwig_clientData;
}
/* Name: _exports_ProfileMetaDataSwig, Type: p_ProfileMetaData, Dtor: _wrap_delete_ProfileMetaDataSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_ProfileMetaDataSwig_class = SWIGV8_CreateClassTemplate("_exports_ProfileMetaDataSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_ProfileMetaDataSwig_clientData.class_templ, _exports_ProfileMetaDataSwig_class);
_exports_ProfileMetaDataSwig_clientData.dtor = _wrap_delete_ProfileMetaDataSwig;
if (SWIGTYPE_p_ProfileMetaData->clientdata == 0) {
  SWIGTYPE_p_ProfileMetaData->clientdata = &_exports_ProfileMetaDataSwig_clientData;
}
/* Name: _exports_ValueMetaDataKeySwig, Type: p_ValueMetaDataKey, Dtor: _wrap_delete_ValueMetaDataKeySwig */
SWIGV8_FUNCTION_TEMPLATE _exports_ValueMetaDataKeySwig_class = SWIGV8_CreateClassTemplate("_exports_ValueMetaDataKeySwig");
SWIGV8_SET_CLASS_TEMPL(_exports_ValueMetaDataKeySwig_clientData.class_templ, _exports_ValueMetaDataKeySwig_class);
_exports_ValueMetaDataKeySwig_clientData.dtor = _wrap_delete_ValueMetaDataKeySwig;
if (SWIGTYPE_p_ValueMetaDataKey->clientdata == 0) {
  SWIGTYPE_p_ValueMetaDataKey->clientdata = &_exports_ValueMetaDataKeySwig_clientData;
}
/* Name: _exports_ValueMetaDataSwig, Type: p_ValueMetaData, Dtor: _wrap_delete_ValueMetaDataSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_ValueMetaDataSwig_class = SWIGV8_CreateClassTemplate("_exports_ValueMetaDataSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_ValueMetaDataSwig_clientData.class_templ, _exports_ValueMetaDataSwig_class);
_exports_ValueMetaDataSwig_clientData.dtor = _wrap_delete_ValueMetaDataSwig;
if (SWIGTYPE_p_ValueMetaData->clientdata == 0) {
  SWIGTYPE_p_ValueMetaData->clientdata = &_exports_ValueMetaDataSwig_clientData;
}
/* Name: _exports_ComponentMetaDataCollectionSwig, Type: p_CollectionT_byte_ComponentMetaData_t, Dtor: _wrap_delete_ComponentMetaDataCollectionSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_ComponentMetaDataCollectionSwig_class = SWIGV8_CreateClassTemplate("_exports_ComponentMetaDataCollectionSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_ComponentMetaDataCollectionSwig_clientData.class_templ, _exports_ComponentMetaDataCollectionSwig_class);
_exports_ComponentMetaDataCollectionSwig_clientData.dtor = _wrap_delete_ComponentMetaDataCollectionSwig;
if (SWIGTYPE_p_CollectionT_byte_ComponentMetaData_t->clientdata == 0) {
  SWIGTYPE_p_CollectionT_byte_ComponentMetaData_t->clientdata = &_exports_ComponentMetaDataCollectionSwig_clientData;
}
/* Name: _exports_PropertyMetaDataCollectionSwig, Type: p_CollectionT_std__string_PropertyMetaData_t, Dtor: _wrap_delete_PropertyMetaDataCollectionSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_PropertyMetaDataCollectionSwig_class = SWIGV8_CreateClassTemplate("_exports_PropertyMetaDataCollectionSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_PropertyMetaDataCollectionSwig_clientData.class_templ, _exports_PropertyMetaDataCollectionSwig_class);
_exports_PropertyMetaDataCollectionSwig_clientData.dtor = _wrap_delete_PropertyMetaDataCollectionSwig;
if (SWIGTYPE_p_CollectionT_std__string_PropertyMetaData_t->clientdata == 0) {
  SWIGTYPE_p_CollectionT_std__string_PropertyMetaData_t->clientdata = &_exports_PropertyMetaDataCollectionSwig_clientData;
}
/* Name: _exports_ProfileMetaDataCollectionSwig, Type: p_CollectionT_uint32_t_ProfileMetaData_t, Dtor: _wrap_delete_ProfileMetaDataCollectionSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_ProfileMetaDataCollectionSwig_class = SWIGV8_CreateClassTemplate("_exports_ProfileMetaDataCollectionSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_ProfileMetaDataCollectionSwig_clientData.class_templ, _exports_ProfileMetaDataCollectionSwig_class);
_exports_ProfileMetaDataCollectionSwig_clientData.dtor = _wrap_delete_ProfileMetaDataCollectionSwig;
if (SWIGTYPE_p_CollectionT_uint32_t_ProfileMetaData_t->clientdata == 0) {
  SWIGTYPE_p_CollectionT_uint32_t_ProfileMetaData_t->clientdata = &_exports_ProfileMetaDataCollectionSwig_clientData;
}
/* Name: _exports_ValueMetaDataCollectionSwig, Type: p_CollectionT_ValueMetaDataKey_ValueMetaData_t, Dtor: _wrap_delete_ValueMetaDataCollectionSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_ValueMetaDataCollectionSwig_class = SWIGV8_CreateClassTemplate("_exports_ValueMetaDataCollectionSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_ValueMetaDataCollectionSwig_clientData.class_templ, _exports_ValueMetaDataCollectionSwig_class);
_exports_ValueMetaDataCollectionSwig_clientData.dtor = _wrap_delete_ValueMetaDataCollectionSwig;
if (SWIGTYPE_p_CollectionT_ValueMetaDataKey_ValueMetaData_t->clientdata == 0) {
  SWIGTYPE_p_CollectionT_ValueMetaDataKey_ValueMetaData_t->clientdata = &_exports_ValueMetaDataCollectionSwig_clientData;
}
/* Name: _exports_MetaDataSwig, Type: p_MetaData, Dtor: _wrap_delete_MetaDataSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_MetaDataSwig_class = SWIGV8_CreateClassTemplate("_exports_MetaDataSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_MetaDataSwig_clientData.class_templ, _exports_MetaDataSwig_class);
_exports_MetaDataSwig_clientData.dtor = _wrap_delete_MetaDataSwig;
if (SWIGTYPE_p_MetaData->clientdata == 0) {
  SWIGTYPE_p_MetaData->clientdata = &_exports_MetaDataSwig_clientData;
}
/* Name: _exports_EngineBaseSwig, Type: p_EngineBase, Dtor: _wrap_delete_EngineBaseSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_EngineBaseSwig_class = SWIGV8_CreateClassTemplate("_exports_EngineBaseSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_EngineBaseSwig_clientData.class_templ, _exports_EngineBaseSwig_class);
_exports_EngineBaseSwig_clientData.dtor = _wrap_delete_EngineBaseSwig;
if (SWIGTYPE_p_EngineBase->clientdata == 0) {
  SWIGTYPE_p_EngineBase->clientdata = &_exports_EngineBaseSwig_clientData;
}
/* Name: _exports_ConfigBaseSwig, Type: p_ConfigBase, Dtor: _wrap_delete_ConfigBaseSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_ConfigBaseSwig_class = SWIGV8_CreateClassTemplate("_exports_ConfigBaseSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_ConfigBaseSwig_clientData.class_templ, _exports_ConfigBaseSwig_class);
_exports_ConfigBaseSwig_clientData.dtor = _wrap_delete_ConfigBaseSwig;
if (SWIGTYPE_p_ConfigBase->clientdata == 0) {
  SWIGTYPE_p_ConfigBase->clientdata = &_exports_ConfigBaseSwig_clientData;
}
/* Name: _exports_ConfigDeviceDetectionSwig, Type: p_ConfigDeviceDetection, Dtor: _wrap_delete_ConfigDeviceDetectionSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_ConfigDeviceDetectionSwig_class = SWIGV8_CreateClassTemplate("_exports_ConfigDeviceDetectionSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_ConfigDeviceDetectionSwig_clientData.class_templ, _exports_ConfigDeviceDetectionSwig_class);
_exports_ConfigDeviceDetectionSwig_clientData.dtor = _wrap_delete_ConfigDeviceDetectionSwig;
if (SWIGTYPE_p_ConfigDeviceDetection->clientdata == 0) {
  SWIGTYPE_p_ConfigDeviceDetection->clientdata = &_exports_ConfigDeviceDetectionSwig_clientData;
}
/* Name: _exports_EvidenceBaseSwig, Type: p_EvidenceBase, Dtor: _wrap_delete_EvidenceBaseSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_EvidenceBaseSwig_class = SWIGV8_CreateClassTemplate("_exports_EvidenceBaseSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_EvidenceBaseSwig_clientData.class_templ, _exports_EvidenceBaseSwig_class);
_exports_EvidenceBaseSwig_clientData.dtor = _wrap_delete_EvidenceBaseSwig;
if (SWIGTYPE_p_EvidenceBase->clientdata == 0) {
  SWIGTYPE_p_EvidenceBase->clientdata = &_exports_EvidenceBaseSwig_clientData;
}
/* Name: _exports_EvidenceDeviceDetectionSwig, Type: p_EvidenceDeviceDetection, Dtor: _wrap_delete_EvidenceDeviceDetectionSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_EvidenceDeviceDetectionSwig_class = SWIGV8_CreateClassTemplate("_exports_EvidenceDeviceDetectionSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_EvidenceDeviceDetectionSwig_clientData.class_templ, _exports_EvidenceDeviceDetectionSwig_class);
_exports_EvidenceDeviceDetectionSwig_clientData.dtor = _wrap_delete_EvidenceDeviceDetectionSwig;
if (SWIGTYPE_p_EvidenceDeviceDetection->clientdata == 0) {
  SWIGTYPE_p_EvidenceDeviceDetection->clientdata = &_exports_EvidenceDeviceDetectionSwig_clientData;
}
/* Name: _exports_EngineDeviceDetectionSwig, Type: p_EngineDeviceDetection, Dtor: _wrap_delete_EngineDeviceDetectionSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_EngineDeviceDetectionSwig_class = SWIGV8_CreateClassTemplate("_exports_EngineDeviceDetectionSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_EngineDeviceDetectionSwig_clientData.class_templ, _exports_EngineDeviceDetectionSwig_class);
_exports_EngineDeviceDetectionSwig_clientData.dtor = _wrap_delete_EngineDeviceDetectionSwig;
if (SWIGTYPE_p_EngineDeviceDetection->clientdata == 0) {
  SWIGTYPE_p_EngineDeviceDetection->clientdata = &_exports_EngineDeviceDetectionSwig_clientData;
}
/* Name: _exports_ResultsDeviceDetectionSwig, Type: p_ResultsDeviceDetection, Dtor: _wrap_delete_ResultsDeviceDetectionSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_ResultsDeviceDetectionSwig_class = SWIGV8_CreateClassTemplate("_exports_ResultsDeviceDetectionSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_ResultsDeviceDetectionSwig_clientData.class_templ, _exports_ResultsDeviceDetectionSwig_class);
_exports_ResultsDeviceDetectionSwig_clientData.dtor = _wrap_delete_ResultsDeviceDetectionSwig;
if (SWIGTYPE_p_ResultsDeviceDetection->clientdata == 0) {
  SWIGTYPE_p_ResultsDeviceDetection->clientdata = &_exports_ResultsDeviceDetectionSwig_clientData;
}
/* Name: _exports_ResultsHashSwig, Type: p_ResultsHash, Dtor: _wrap_delete_ResultsHashSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_ResultsHashSwig_class = SWIGV8_CreateClassTemplate("_exports_ResultsHashSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_ResultsHashSwig_clientData.class_templ, _exports_ResultsHashSwig_class);
_exports_ResultsHashSwig_clientData.dtor = _wrap_delete_ResultsHashSwig;
if (SWIGTYPE_p_ResultsHash->clientdata == 0) {
  SWIGTYPE_p_ResultsHash->clientdata = &_exports_ResultsHashSwig_clientData;
}
/* Name: _exports_CollectionConfigSwig, Type: p_CollectionConfig, Dtor: _wrap_delete_CollectionConfigSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_CollectionConfigSwig_class = SWIGV8_CreateClassTemplate("_exports_CollectionConfigSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_CollectionConfigSwig_clientData.class_templ, _exports_CollectionConfigSwig_class);
_exports_CollectionConfigSwig_clientData.dtor = _wrap_delete_CollectionConfigSwig;
if (SWIGTYPE_p_CollectionConfig->clientdata == 0) {
  SWIGTYPE_p_CollectionConfig->clientdata = &_exports_CollectionConfigSwig_clientData;
}
/* Name: _exports_ConfigHashSwig, Type: p_ConfigHash, Dtor: _wrap_delete_ConfigHashSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_ConfigHashSwig_class = SWIGV8_CreateClassTemplate("_exports_ConfigHashSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_ConfigHashSwig_clientData.class_templ, _exports_ConfigHashSwig_class);
_exports_ConfigHashSwig_clientData.dtor = _wrap_delete_ConfigHashSwig;
if (SWIGTYPE_p_ConfigHash->clientdata == 0) {
  SWIGTYPE_p_ConfigHash->clientdata = &_exports_ConfigHashSwig_clientData;
}
/* Name: _exports_EngineHashSwig, Type: p_EngineHash, Dtor: _wrap_delete_EngineHashSwig */
SWIGV8_FUNCTION_TEMPLATE _exports_EngineHashSwig_class = SWIGV8_CreateClassTemplate("_exports_EngineHashSwig");
SWIGV8_SET_CLASS_TEMPL(_exports_EngineHashSwig_clientData.class_templ, _exports_EngineHashSwig_class);
_exports_EngineHashSwig_clientData.dtor = _wrap_delete_EngineHashSwig;
if (SWIGTYPE_p_EngineHash->clientdata == 0) {
  SWIGTYPE_p_EngineHash->clientdata = &_exports_EngineHashSwig_clientData;
}


  /* register wrapper functions */
  SWIGV8_AddMemberFunction(_exports_MapStringStringSwig_class, "size", _wrap_MapStringStringSwig_size);
SWIGV8_AddMemberFunction(_exports_MapStringStringSwig_class, "empty", _wrap_MapStringStringSwig_empty);
SWIGV8_AddMemberFunction(_exports_MapStringStringSwig_class, "clear", _wrap_MapStringStringSwig_clear);
SWIGV8_AddMemberFunction(_exports_MapStringStringSwig_class, "get", _wrap_MapStringStringSwig_get);
SWIGV8_AddMemberFunction(_exports_MapStringStringSwig_class, "set", _wrap_MapStringStringSwig_set);
SWIGV8_AddMemberFunction(_exports_MapStringStringSwig_class, "del", _wrap_MapStringStringSwig_del);
SWIGV8_AddMemberFunction(_exports_MapStringStringSwig_class, "has_key", _wrap_MapStringStringSwig_has_key);
SWIGV8_AddMemberFunction(_exports_VectorStringSwig_class, "size", _wrap_VectorStringSwig_size);
SWIGV8_AddMemberFunction(_exports_VectorStringSwig_class, "capacity", _wrap_VectorStringSwig_capacity);
SWIGV8_AddMemberFunction(_exports_VectorStringSwig_class, "reserve", _wrap_VectorStringSwig_reserve);
SWIGV8_AddMemberFunction(_exports_VectorStringSwig_class, "isEmpty", _wrap_VectorStringSwig_isEmpty);
SWIGV8_AddMemberFunction(_exports_VectorStringSwig_class, "clear", _wrap_VectorStringSwig_clear);
SWIGV8_AddMemberFunction(_exports_VectorStringSwig_class, "add", _wrap_VectorStringSwig_add);
SWIGV8_AddMemberFunction(_exports_VectorStringSwig_class, "get", _wrap_VectorStringSwig_get);
SWIGV8_AddMemberFunction(_exports_VectorStringSwig_class, "set", _wrap_VectorStringSwig_set);
SWIGV8_AddMemberFunction(_exports_RequiredPropertiesConfigSwig_class, "getProperties", _wrap_RequiredPropertiesConfigSwig_getProperties);
SWIGV8_AddMemberFunction(_exports_StringValueSwig_class, "hasValue", _wrap_StringValueSwig_hasValue);
SWIGV8_AddMemberFunction(_exports_StringValueSwig_class, "getNoValueMessage", _wrap_StringValueSwig_getNoValueMessage);
SWIGV8_AddMemberFunction(_exports_StringValueSwig_class, "getValue", _wrap_StringValueSwig_getValue);
SWIGV8_AddMemberFunction(_exports_BoolValueSwig_class, "hasValue", _wrap_BoolValueSwig_hasValue);
SWIGV8_AddMemberFunction(_exports_BoolValueSwig_class, "getNoValueMessage", _wrap_BoolValueSwig_getNoValueMessage);
SWIGV8_AddMemberFunction(_exports_BoolValueSwig_class, "getValue", _wrap_BoolValueSwig_getValue);
SWIGV8_AddMemberFunction(_exports_IntegerValueSwig_class, "hasValue", _wrap_IntegerValueSwig_hasValue);
SWIGV8_AddMemberFunction(_exports_IntegerValueSwig_class, "getNoValueMessage", _wrap_IntegerValueSwig_getNoValueMessage);
SWIGV8_AddMemberFunction(_exports_IntegerValueSwig_class, "getValue", _wrap_IntegerValueSwig_getValue);
SWIGV8_AddMemberFunction(_exports_VectorStringValuesSwig_class, "hasValue", _wrap_VectorStringValuesSwig_hasValue);
SWIGV8_AddMemberFunction(_exports_VectorStringValuesSwig_class, "getNoValueMessage", _wrap_VectorStringValuesSwig_getNoValueMessage);
SWIGV8_AddMemberFunction(_exports_VectorStringValuesSwig_class, "getValue", _wrap_VectorStringValuesSwig_getValue);
SWIGV8_AddMemberFunction(_exports_DoubleValueSwig_class, "hasValue", _wrap_DoubleValueSwig_hasValue);
SWIGV8_AddMemberFunction(_exports_DoubleValueSwig_class, "getNoValueMessage", _wrap_DoubleValueSwig_getNoValueMessage);
SWIGV8_AddMemberFunction(_exports_DoubleValueSwig_class, "getValue", _wrap_DoubleValueSwig_getValue);
SWIGV8_AddMemberFunction(_exports_ResultsBaseSwig_class, "getAvailableProperties", _wrap_ResultsBaseSwig_getAvailableProperties);
SWIGV8_AddMemberFunction(_exports_ResultsBaseSwig_class, "containsProperty", _wrap_ResultsBaseSwig_containsProperty);
SWIGV8_AddMemberFunction(_exports_ResultsBaseSwig_class, "getProperties", _wrap_ResultsBaseSwig_getProperties);
SWIGV8_AddMemberFunction(_exports_ResultsBaseSwig_class, "getPropertyName", _wrap_ResultsBaseSwig_getPropertyName);
SWIGV8_AddMemberFunction(_exports_ResultsBaseSwig_class, "getValues", _wrap_ResultsBaseSwig__wrap_ResultsBaseSwig_getValues);
SWIGV8_AddMemberFunction(_exports_ResultsBaseSwig_class, "getValueAsString", _wrap_ResultsBaseSwig__wrap_ResultsBaseSwig_getValueAsString);
SWIGV8_AddMemberFunction(_exports_ResultsBaseSwig_class, "getValueAsBool", _wrap_ResultsBaseSwig__wrap_ResultsBaseSwig_getValueAsBool);
SWIGV8_AddMemberFunction(_exports_ResultsBaseSwig_class, "getValueAsInteger", _wrap_ResultsBaseSwig__wrap_ResultsBaseSwig_getValueAsInteger);
SWIGV8_AddMemberFunction(_exports_ResultsBaseSwig_class, "getValueAsDouble", _wrap_ResultsBaseSwig__wrap_ResultsBaseSwig_getValueAsDouble);
SWIGV8_AddMemberFunction(_exports_Date_class, "getYear", _wrap_Date_getYear);
SWIGV8_AddMemberFunction(_exports_Date_class, "getMonth", _wrap_Date_getMonth);
SWIGV8_AddMemberFunction(_exports_Date_class, "getDay", _wrap_Date_getDay);
SWIGV8_AddMemberFunction(_exports_PropertyMetaDataSwig_class, "getName", _wrap_PropertyMetaDataSwig_getName);
SWIGV8_AddMemberFunction(_exports_PropertyMetaDataSwig_class, "getDataFilesWherePresent", _wrap_PropertyMetaDataSwig_getDataFilesWherePresent);
SWIGV8_AddMemberFunction(_exports_PropertyMetaDataSwig_class, "getType", _wrap_PropertyMetaDataSwig_getType);
SWIGV8_AddMemberFunction(_exports_PropertyMetaDataSwig_class, "getCategory", _wrap_PropertyMetaDataSwig_getCategory);
SWIGV8_AddMemberFunction(_exports_PropertyMetaDataSwig_class, "getUrl", _wrap_PropertyMetaDataSwig_getUrl);
SWIGV8_AddMemberFunction(_exports_PropertyMetaDataSwig_class, "getAvailable", _wrap_PropertyMetaDataSwig_getAvailable);
SWIGV8_AddMemberFunction(_exports_PropertyMetaDataSwig_class, "getDisplayOrder", _wrap_PropertyMetaDataSwig_getDisplayOrder);
SWIGV8_AddMemberFunction(_exports_PropertyMetaDataSwig_class, "getIsMandatory", _wrap_PropertyMetaDataSwig_getIsMandatory);
SWIGV8_AddMemberFunction(_exports_PropertyMetaDataSwig_class, "getIsList", _wrap_PropertyMetaDataSwig_getIsList);
SWIGV8_AddMemberFunction(_exports_PropertyMetaDataSwig_class, "getIsObsolete", _wrap_PropertyMetaDataSwig_getIsObsolete);
SWIGV8_AddMemberFunction(_exports_PropertyMetaDataSwig_class, "getShow", _wrap_PropertyMetaDataSwig_getShow);
SWIGV8_AddMemberFunction(_exports_PropertyMetaDataSwig_class, "getShowValues", _wrap_PropertyMetaDataSwig_getShowValues);
SWIGV8_AddMemberFunction(_exports_PropertyMetaDataSwig_class, "getDescription", _wrap_PropertyMetaDataSwig_getDescription);
SWIGV8_AddMemberFunction(_exports_ComponentMetaDataSwig_class, "getComponentIdAsInt", _wrap_ComponentMetaDataSwig_getComponentIdAsInt);
SWIGV8_AddMemberFunction(_exports_ComponentMetaDataSwig_class, "getComponentId", _wrap_ComponentMetaDataSwig_getComponentId);
SWIGV8_AddMemberFunction(_exports_ComponentMetaDataSwig_class, "getName", _wrap_ComponentMetaDataSwig_getName);
SWIGV8_AddMemberFunction(_exports_ProfileMetaDataSwig_class, "getProfileId", _wrap_ProfileMetaDataSwig_getProfileId);
SWIGV8_AddMemberFunction(_exports_ValueMetaDataKeySwig_class, "getPropertyName", _wrap_ValueMetaDataKeySwig_getPropertyName);
SWIGV8_AddMemberFunction(_exports_ValueMetaDataKeySwig_class, "getValueName", _wrap_ValueMetaDataKeySwig_getValueName);
SWIGV8_AddMemberFunction(_exports_ValueMetaDataSwig_class, "getName", _wrap_ValueMetaDataSwig_getName);
SWIGV8_AddMemberFunction(_exports_ValueMetaDataSwig_class, "getDescription", _wrap_ValueMetaDataSwig_getDescription);
SWIGV8_AddMemberFunction(_exports_ValueMetaDataSwig_class, "getUrl", _wrap_ValueMetaDataSwig_getUrl);
SWIGV8_AddMemberFunction(_exports_ComponentMetaDataCollectionSwig_class, "getByKey", _wrap_ComponentMetaDataCollectionSwig_getByKey);
SWIGV8_AddMemberFunction(_exports_ComponentMetaDataCollectionSwig_class, "getByIndex", _wrap_ComponentMetaDataCollectionSwig_getByIndex);
SWIGV8_AddMemberFunction(_exports_ComponentMetaDataCollectionSwig_class, "getSize", _wrap_ComponentMetaDataCollectionSwig_getSize);
SWIGV8_AddMemberFunction(_exports_PropertyMetaDataCollectionSwig_class, "getByKey", _wrap_PropertyMetaDataCollectionSwig_getByKey);
SWIGV8_AddMemberFunction(_exports_PropertyMetaDataCollectionSwig_class, "getByIndex", _wrap_PropertyMetaDataCollectionSwig_getByIndex);
SWIGV8_AddMemberFunction(_exports_PropertyMetaDataCollectionSwig_class, "getSize", _wrap_PropertyMetaDataCollectionSwig_getSize);
SWIGV8_AddMemberFunction(_exports_ProfileMetaDataCollectionSwig_class, "getByKey", _wrap_ProfileMetaDataCollectionSwig_getByKey);
SWIGV8_AddMemberFunction(_exports_ProfileMetaDataCollectionSwig_class, "getByIndex", _wrap_ProfileMetaDataCollectionSwig_getByIndex);
SWIGV8_AddMemberFunction(_exports_ProfileMetaDataCollectionSwig_class, "getSize", _wrap_ProfileMetaDataCollectionSwig_getSize);
SWIGV8_AddMemberFunction(_exports_ValueMetaDataCollectionSwig_class, "getByKey", _wrap_ValueMetaDataCollectionSwig_getByKey);
SWIGV8_AddMemberFunction(_exports_ValueMetaDataCollectionSwig_class, "getByIndex", _wrap_ValueMetaDataCollectionSwig_getByIndex);
SWIGV8_AddMemberFunction(_exports_ValueMetaDataCollectionSwig_class, "getSize", _wrap_ValueMetaDataCollectionSwig_getSize);
SWIGV8_AddMemberFunction(_exports_MetaDataSwig_class, "getComponents", _wrap_MetaDataSwig_getComponents);
SWIGV8_AddMemberFunction(_exports_MetaDataSwig_class, "getProperties", _wrap_MetaDataSwig_getProperties);
SWIGV8_AddMemberFunction(_exports_MetaDataSwig_class, "getProfiles", _wrap_MetaDataSwig_getProfiles);
SWIGV8_AddMemberFunction(_exports_MetaDataSwig_class, "getValues", _wrap_MetaDataSwig_getValues);
SWIGV8_AddMemberFunction(_exports_MetaDataSwig_class, "getValuesForProperty", _wrap_MetaDataSwig_getValuesForProperty);
SWIGV8_AddMemberFunction(_exports_MetaDataSwig_class, "getValuesForProfile", _wrap_MetaDataSwig_getValuesForProfile);
SWIGV8_AddMemberFunction(_exports_MetaDataSwig_class, "getComponentForProfile", _wrap_MetaDataSwig_getComponentForProfile);
SWIGV8_AddMemberFunction(_exports_MetaDataSwig_class, "getComponentForProperty", _wrap_MetaDataSwig_getComponentForProperty);
SWIGV8_AddMemberFunction(_exports_MetaDataSwig_class, "getDefaultProfileForComponent", _wrap_MetaDataSwig_getDefaultProfileForComponent);
SWIGV8_AddMemberFunction(_exports_MetaDataSwig_class, "getDefaultValueForProperty", _wrap_MetaDataSwig_getDefaultValueForProperty);
SWIGV8_AddMemberFunction(_exports_MetaDataSwig_class, "getPropertiesForComponent", _wrap_MetaDataSwig_getPropertiesForComponent);
SWIGV8_AddMemberFunction(_exports_MetaDataSwig_class, "getPropertyForValue", _wrap_MetaDataSwig_getPropertyForValue);
SWIGV8_AddMemberFunction(_exports_EngineBaseSwig_class, "setLicenseKey", _wrap_EngineBaseSwig_setLicenseKey);
SWIGV8_AddMemberFunction(_exports_EngineBaseSwig_class, "setDataUpdateUrl", _wrap_EngineBaseSwig_setDataUpdateUrl);
SWIGV8_AddMemberFunction(_exports_EngineBaseSwig_class, "getMetaData", _wrap_EngineBaseSwig_getMetaData);
SWIGV8_AddMemberFunction(_exports_EngineBaseSwig_class, "getAutomaticUpdatesEnabled", _wrap_EngineBaseSwig_getAutomaticUpdatesEnabled);
SWIGV8_AddMemberFunction(_exports_EngineBaseSwig_class, "processBase", _wrap_EngineBaseSwig_processBase);
SWIGV8_AddMemberFunction(_exports_EngineBaseSwig_class, "refreshData", _wrap_EngineBaseSwig__wrap_EngineBaseSwig_refreshData);
SWIGV8_AddMemberFunction(_exports_EngineBaseSwig_class, "getDataUpdateUrl", _wrap_EngineBaseSwig_getDataUpdateUrl);
SWIGV8_AddMemberFunction(_exports_EngineBaseSwig_class, "getPublishedTime", _wrap_EngineBaseSwig_getPublishedTime);
SWIGV8_AddMemberFunction(_exports_EngineBaseSwig_class, "getUpdateAvailableTime", _wrap_EngineBaseSwig_getUpdateAvailableTime);
SWIGV8_AddMemberFunction(_exports_EngineBaseSwig_class, "getDataFilePath", _wrap_EngineBaseSwig_getDataFilePath);
SWIGV8_AddMemberFunction(_exports_EngineBaseSwig_class, "getDataFileTempPath", _wrap_EngineBaseSwig_getDataFileTempPath);
SWIGV8_AddMemberFunction(_exports_EngineBaseSwig_class, "getProduct", _wrap_EngineBaseSwig_getProduct);
SWIGV8_AddMemberFunction(_exports_EngineBaseSwig_class, "getType", _wrap_EngineBaseSwig_getType);
SWIGV8_AddMemberFunction(_exports_EngineBaseSwig_class, "getKeys", _wrap_EngineBaseSwig_getKeys);
SWIGV8_AddMemberFunction(_exports_EngineBaseSwig_class, "getIsThreadSafe", _wrap_EngineBaseSwig_getIsThreadSafe);
SWIGV8_AddMemberFunction(_exports_ConfigBaseSwig_class, "setUseUpperPrefixHeaders", _wrap_ConfigBaseSwig_setUseUpperPrefixHeaders);
SWIGV8_AddMemberFunction(_exports_ConfigBaseSwig_class, "setUseTempFile", _wrap_ConfigBaseSwig_setUseTempFile);
SWIGV8_AddMemberFunction(_exports_ConfigBaseSwig_class, "setReuseTempFile", _wrap_ConfigBaseSwig_setReuseTempFile);
SWIGV8_AddMemberFunction(_exports_ConfigBaseSwig_class, "setTempDirectories", _wrap_ConfigBaseSwig_setTempDirectories);
SWIGV8_AddMemberFunction(_exports_ConfigBaseSwig_class, "getUseUpperPrefixHeaders", _wrap_ConfigBaseSwig_getUseUpperPrefixHeaders);
SWIGV8_AddMemberFunction(_exports_ConfigBaseSwig_class, "getUseTempFile", _wrap_ConfigBaseSwig_getUseTempFile);
SWIGV8_AddMemberFunction(_exports_ConfigBaseSwig_class, "getReuseTempFile", _wrap_ConfigBaseSwig_getReuseTempFile);
SWIGV8_AddMemberFunction(_exports_ConfigBaseSwig_class, "getTempDirectories", _wrap_ConfigBaseSwig_getTempDirectories);
SWIGV8_AddMemberFunction(_exports_ConfigBaseSwig_class, "getConcurrency", _wrap_ConfigBaseSwig_getConcurrency);
SWIGV8_AddMemberFunction(_exports_ConfigDeviceDetectionSwig_class, "setUpdateMatchedUserAgent", _wrap_ConfigDeviceDetectionSwig_setUpdateMatchedUserAgent);
SWIGV8_AddMemberFunction(_exports_ConfigDeviceDetectionSwig_class, "setMaxMatchedUserAgentLength", _wrap_ConfigDeviceDetectionSwig_setMaxMatchedUserAgentLength);
SWIGV8_AddMemberFunction(_exports_ConfigDeviceDetectionSwig_class, "setAllowUnmatched", _wrap_ConfigDeviceDetectionSwig_setAllowUnmatched);
SWIGV8_AddMemberFunction(_exports_ConfigDeviceDetectionSwig_class, "getUpdateMatchedUserAgent", _wrap_ConfigDeviceDetectionSwig_getUpdateMatchedUserAgent);
SWIGV8_AddMemberFunction(_exports_ConfigDeviceDetectionSwig_class, "getMaxMatchedUserAgentLength", _wrap_ConfigDeviceDetectionSwig_getMaxMatchedUserAgentLength);
SWIGV8_AddMemberFunction(_exports_ConfigDeviceDetectionSwig_class, "getAllowUnmatched", _wrap_ConfigDeviceDetectionSwig_getAllowUnmatched);
SWIGV8_AddMemberFunction(_exports_EvidenceBaseSwig_class, "set", _wrap_EvidenceBaseSwig_set);
SWIGV8_AddMemberFunction(_exports_EvidenceBaseSwig_class, "get", _wrap_EvidenceBaseSwig_get);
SWIGV8_AddMemberFunction(_exports_EvidenceBaseSwig_class, "size", _wrap_EvidenceBaseSwig_size);
SWIGV8_AddMemberFunction(_exports_EngineDeviceDetectionSwig_class, "processDeviceDetection", _wrap_EngineDeviceDetectionSwig__wrap_EngineDeviceDetectionSwig_processDeviceDetection);
SWIGV8_AddMemberFunction(_exports_ResultsDeviceDetectionSwig_class, "getDeviceId", _wrap_ResultsDeviceDetectionSwig_getDeviceId);
SWIGV8_AddMemberFunction(_exports_ResultsDeviceDetectionSwig_class, "getUserAgent", _wrap_ResultsDeviceDetectionSwig_getUserAgent);
SWIGV8_AddMemberFunction(_exports_ResultsDeviceDetectionSwig_class, "getUserAgents", _wrap_ResultsDeviceDetectionSwig_getUserAgents);
SWIGV8_AddMemberFunction(_exports_ResultsHashSwig_class, "getDeviceId", _wrap_ResultsHashSwig__wrap_ResultsHashSwig_getDeviceId);
SWIGV8_AddMemberFunction(_exports_ResultsHashSwig_class, "getDifference", _wrap_ResultsHashSwig__wrap_ResultsHashSwig_getDifference);
SWIGV8_AddMemberFunction(_exports_ResultsHashSwig_class, "getMethod", _wrap_ResultsHashSwig__wrap_ResultsHashSwig_getMethod);
SWIGV8_AddMemberFunction(_exports_ResultsHashSwig_class, "getDrift", _wrap_ResultsHashSwig__wrap_ResultsHashSwig_getDrift);
SWIGV8_AddMemberFunction(_exports_ResultsHashSwig_class, "getTrace", _wrap_ResultsHashSwig_getTrace);
SWIGV8_AddMemberFunction(_exports_ResultsHashSwig_class, "getMatchedNodes", _wrap_ResultsHashSwig_getMatchedNodes);
SWIGV8_AddMemberFunction(_exports_ResultsHashSwig_class, "getIterations", _wrap_ResultsHashSwig_getIterations);
SWIGV8_AddMemberFunction(_exports_ResultsHashSwig_class, "getUserAgent", _wrap_ResultsHashSwig_getUserAgent);
SWIGV8_AddMemberFunction(_exports_ResultsHashSwig_class, "getUserAgents", _wrap_ResultsHashSwig_getUserAgents);
SWIGV8_AddMemberFunction(_exports_CollectionConfigSwig_class, "setCapacity", _wrap_CollectionConfigSwig_setCapacity);
SWIGV8_AddMemberFunction(_exports_CollectionConfigSwig_class, "setConcurrency", _wrap_CollectionConfigSwig_setConcurrency);
SWIGV8_AddMemberFunction(_exports_CollectionConfigSwig_class, "setLoaded", _wrap_CollectionConfigSwig_setLoaded);
SWIGV8_AddMemberFunction(_exports_CollectionConfigSwig_class, "getCapacity", _wrap_CollectionConfigSwig_getCapacity);
SWIGV8_AddMemberFunction(_exports_CollectionConfigSwig_class, "getConcurrency", _wrap_CollectionConfigSwig_getConcurrency);
SWIGV8_AddMemberFunction(_exports_CollectionConfigSwig_class, "getLoaded", _wrap_CollectionConfigSwig_getLoaded);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "setHighPerformance", _wrap_ConfigHashSwig_setHighPerformance);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "setBalanced", _wrap_ConfigHashSwig_setBalanced);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "setBalancedTemp", _wrap_ConfigHashSwig_setBalancedTemp);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "setLowMemory", _wrap_ConfigHashSwig_setLowMemory);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "setMaxPerformance", _wrap_ConfigHashSwig_setMaxPerformance);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "setDrift", _wrap_ConfigHashSwig_setDrift);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "setDifference", _wrap_ConfigHashSwig_setDifference);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "setConcurrency", _wrap_ConfigHashSwig_setConcurrency);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "setUsePerformanceGraph", _wrap_ConfigHashSwig_setUsePerformanceGraph);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "setUsePredictiveGraph", _wrap_ConfigHashSwig_setUsePredictiveGraph);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "setTraceRoute", _wrap_ConfigHashSwig_setTraceRoute);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "getStrings", _wrap_ConfigHashSwig_getStrings);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "getProperties", _wrap_ConfigHashSwig_getProperties);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "getValues", _wrap_ConfigHashSwig_getValues);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "getProfiles", _wrap_ConfigHashSwig_getProfiles);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "getNodes", _wrap_ConfigHashSwig_getNodes);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "getProfileOffsets", _wrap_ConfigHashSwig_getProfileOffsets);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "getDrift", _wrap_ConfigHashSwig_getDrift);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "getDifference", _wrap_ConfigHashSwig_getDifference);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "getUsePerformanceGraph", _wrap_ConfigHashSwig_getUsePerformanceGraph);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "getUsePredictiveGraph", _wrap_ConfigHashSwig_getUsePredictiveGraph);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "getConcurrency", _wrap_ConfigHashSwig_getConcurrency);
SWIGV8_AddMemberFunction(_exports_ConfigHashSwig_class, "getTraceRoute", _wrap_ConfigHashSwig_getTraceRoute);
SWIGV8_AddMemberFunction(_exports_EngineHashSwig_class, "getPublishedTime", _wrap_EngineHashSwig_getPublishedTime);
SWIGV8_AddMemberFunction(_exports_EngineHashSwig_class, "getUpdateAvailableTime", _wrap_EngineHashSwig_getUpdateAvailableTime);
SWIGV8_AddMemberFunction(_exports_EngineHashSwig_class, "getDataFilePath", _wrap_EngineHashSwig_getDataFilePath);
SWIGV8_AddMemberFunction(_exports_EngineHashSwig_class, "getDataFileTempPath", _wrap_EngineHashSwig_getDataFileTempPath);
SWIGV8_AddMemberFunction(_exports_EngineHashSwig_class, "refreshData", _wrap_EngineHashSwig__wrap_EngineHashSwig_refreshData);
SWIGV8_AddMemberFunction(_exports_EngineHashSwig_class, "process", _wrap_EngineHashSwig__wrap_EngineHashSwig_process);
SWIGV8_AddMemberFunction(_exports_EngineHashSwig_class, "processBase", _wrap_EngineHashSwig_processBase);
SWIGV8_AddMemberFunction(_exports_EngineHashSwig_class, "processDeviceDetection", _wrap_EngineHashSwig__wrap_EngineHashSwig_processDeviceDetection);


  /* setup inheritances */
  if (SWIGTYPE_p_ConfigBase->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ConfigBase->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_ConfigDeviceDetectionSwig_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ConfigBase->clientdata)->class_templ);
#else
  _exports_ConfigDeviceDetectionSwig_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ConfigBase->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_ConfigDeviceDetectionSwig _ConfigBase\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_ConfigDeviceDetectionSwig _ConfigBase\n");
#endif
}
if (SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_EvidenceBaseSwig_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t->clientdata)->class_templ);
#else
  _exports_EvidenceBaseSwig_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_EvidenceBaseSwig _std__mapT_std__string_std__string_std__lessT_std__string_t_t\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_EvidenceBaseSwig _std__mapT_std__string_std__string_std__lessT_std__string_t_t\n");
#endif
}
if (SWIGTYPE_p_EvidenceBase->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_EvidenceBase->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_EvidenceDeviceDetectionSwig_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_EvidenceBase->clientdata)->class_templ);
#else
  _exports_EvidenceDeviceDetectionSwig_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_EvidenceBase->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_EvidenceDeviceDetectionSwig _EvidenceBase\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_EvidenceDeviceDetectionSwig _EvidenceBase\n");
#endif
}
if (SWIGTYPE_p_EngineBase->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_EngineBase->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_EngineDeviceDetectionSwig_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_EngineBase->clientdata)->class_templ);
#else
  _exports_EngineDeviceDetectionSwig_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_EngineBase->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_EngineDeviceDetectionSwig _EngineBase\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_EngineDeviceDetectionSwig _EngineBase\n");
#endif
}
if (SWIGTYPE_p_ResultsBase->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ResultsBase->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_ResultsDeviceDetectionSwig_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ResultsBase->clientdata)->class_templ);
#else
  _exports_ResultsDeviceDetectionSwig_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ResultsBase->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_ResultsDeviceDetectionSwig _ResultsBase\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_ResultsDeviceDetectionSwig _ResultsBase\n");
#endif
}
if (SWIGTYPE_p_ResultsDeviceDetection->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ResultsDeviceDetection->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_ResultsHashSwig_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ResultsDeviceDetection->clientdata)->class_templ);
#else
  _exports_ResultsHashSwig_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ResultsDeviceDetection->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_ResultsHashSwig _ResultsDeviceDetection\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_ResultsHashSwig _ResultsDeviceDetection\n");
#endif
}
if (SWIGTYPE_p_ConfigDeviceDetection->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ConfigDeviceDetection->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_ConfigHashSwig_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ConfigDeviceDetection->clientdata)->class_templ);
#else
  _exports_ConfigHashSwig_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_ConfigDeviceDetection->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_ConfigHashSwig _ConfigDeviceDetection\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_ConfigHashSwig _ConfigDeviceDetection\n");
#endif
}
if (SWIGTYPE_p_EngineDeviceDetection->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_EngineDeviceDetection->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_EngineHashSwig_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_EngineDeviceDetection->clientdata)->class_templ);
#else
  _exports_EngineHashSwig_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_EngineDeviceDetection->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_EngineHashSwig _EngineDeviceDetection\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_EngineHashSwig _EngineDeviceDetection\n");
#endif
}


  /* class instances */
  /* Class: MapStringStringSwig (_exports_MapStringStringSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_MapStringStringSwig_class_0 = SWIGV8_CreateClassTemplate("MapStringStringSwig");
_exports_MapStringStringSwig_class_0->SetCallHandler(_wrap_new_MapStringStringSwig);
_exports_MapStringStringSwig_class_0->Inherit(_exports_MapStringStringSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_MapStringStringSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_MapStringStringSwig_obj = _exports_MapStringStringSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_MapStringStringSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_MapStringStringSwig_obj = _exports_MapStringStringSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_MapStringStringSwig_obj = _exports_MapStringStringSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: VectorStringSwig (_exports_VectorStringSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_VectorStringSwig_class_0 = SWIGV8_CreateClassTemplate("VectorStringSwig");
_exports_VectorStringSwig_class_0->SetCallHandler(_wrap_new_VectorStringSwig);
_exports_VectorStringSwig_class_0->Inherit(_exports_VectorStringSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_VectorStringSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_VectorStringSwig_obj = _exports_VectorStringSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_VectorStringSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_VectorStringSwig_obj = _exports_VectorStringSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_VectorStringSwig_obj = _exports_VectorStringSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: RequiredPropertiesConfigSwig (_exports_RequiredPropertiesConfigSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_RequiredPropertiesConfigSwig_class_0 = SWIGV8_CreateClassTemplate("RequiredPropertiesConfigSwig");
_exports_RequiredPropertiesConfigSwig_class_0->SetCallHandler(_wrap_new_RequiredPropertiesConfigSwig);
_exports_RequiredPropertiesConfigSwig_class_0->Inherit(_exports_RequiredPropertiesConfigSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_RequiredPropertiesConfigSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_RequiredPropertiesConfigSwig_obj = _exports_RequiredPropertiesConfigSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_RequiredPropertiesConfigSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_RequiredPropertiesConfigSwig_obj = _exports_RequiredPropertiesConfigSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_RequiredPropertiesConfigSwig_obj = _exports_RequiredPropertiesConfigSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: StringValueSwig (_exports_StringValueSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_StringValueSwig_class_0 = SWIGV8_CreateClassTemplate("StringValueSwig");
_exports_StringValueSwig_class_0->SetCallHandler(_wrap_new_StringValueSwig);
_exports_StringValueSwig_class_0->Inherit(_exports_StringValueSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_StringValueSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_StringValueSwig_obj = _exports_StringValueSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_StringValueSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_StringValueSwig_obj = _exports_StringValueSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_StringValueSwig_obj = _exports_StringValueSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: BoolValueSwig (_exports_BoolValueSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_BoolValueSwig_class_0 = SWIGV8_CreateClassTemplate("BoolValueSwig");
_exports_BoolValueSwig_class_0->SetCallHandler(_wrap_new_BoolValueSwig);
_exports_BoolValueSwig_class_0->Inherit(_exports_BoolValueSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_BoolValueSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_BoolValueSwig_obj = _exports_BoolValueSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_BoolValueSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_BoolValueSwig_obj = _exports_BoolValueSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_BoolValueSwig_obj = _exports_BoolValueSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: IntegerValueSwig (_exports_IntegerValueSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_IntegerValueSwig_class_0 = SWIGV8_CreateClassTemplate("IntegerValueSwig");
_exports_IntegerValueSwig_class_0->SetCallHandler(_wrap_new_IntegerValueSwig);
_exports_IntegerValueSwig_class_0->Inherit(_exports_IntegerValueSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_IntegerValueSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_IntegerValueSwig_obj = _exports_IntegerValueSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_IntegerValueSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_IntegerValueSwig_obj = _exports_IntegerValueSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_IntegerValueSwig_obj = _exports_IntegerValueSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: VectorStringValuesSwig (_exports_VectorStringValuesSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_VectorStringValuesSwig_class_0 = SWIGV8_CreateClassTemplate("VectorStringValuesSwig");
_exports_VectorStringValuesSwig_class_0->SetCallHandler(_wrap_new_VectorStringValuesSwig);
_exports_VectorStringValuesSwig_class_0->Inherit(_exports_VectorStringValuesSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_VectorStringValuesSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_VectorStringValuesSwig_obj = _exports_VectorStringValuesSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_VectorStringValuesSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_VectorStringValuesSwig_obj = _exports_VectorStringValuesSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_VectorStringValuesSwig_obj = _exports_VectorStringValuesSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: DoubleValueSwig (_exports_DoubleValueSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_DoubleValueSwig_class_0 = SWIGV8_CreateClassTemplate("DoubleValueSwig");
_exports_DoubleValueSwig_class_0->SetCallHandler(_wrap_new_DoubleValueSwig);
_exports_DoubleValueSwig_class_0->Inherit(_exports_DoubleValueSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_DoubleValueSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_DoubleValueSwig_obj = _exports_DoubleValueSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_DoubleValueSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_DoubleValueSwig_obj = _exports_DoubleValueSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_DoubleValueSwig_obj = _exports_DoubleValueSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: ResultsBaseSwig (_exports_ResultsBaseSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_ResultsBaseSwig_class_0 = SWIGV8_CreateClassTemplate("ResultsBaseSwig");
_exports_ResultsBaseSwig_class_0->SetCallHandler(_wrap_new_veto_ResultsBaseSwig);
_exports_ResultsBaseSwig_class_0->Inherit(_exports_ResultsBaseSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_ResultsBaseSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ResultsBaseSwig_obj = _exports_ResultsBaseSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_ResultsBaseSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_ResultsBaseSwig_obj = _exports_ResultsBaseSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_ResultsBaseSwig_obj = _exports_ResultsBaseSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: Date (_exports_Date) */
SWIGV8_FUNCTION_TEMPLATE _exports_Date_class_0 = SWIGV8_CreateClassTemplate("Date");
_exports_Date_class_0->SetCallHandler(_wrap_new_veto_Date);
_exports_Date_class_0->Inherit(_exports_Date_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_Date_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Date_obj = _exports_Date_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_Date_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_Date_obj = _exports_Date_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_Date_obj = _exports_Date_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: PropertyMetaDataSwig (_exports_PropertyMetaDataSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_PropertyMetaDataSwig_class_0 = SWIGV8_CreateClassTemplate("PropertyMetaDataSwig");
_exports_PropertyMetaDataSwig_class_0->SetCallHandler(_wrap_new_veto_PropertyMetaDataSwig);
_exports_PropertyMetaDataSwig_class_0->Inherit(_exports_PropertyMetaDataSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_PropertyMetaDataSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PropertyMetaDataSwig_obj = _exports_PropertyMetaDataSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_PropertyMetaDataSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_PropertyMetaDataSwig_obj = _exports_PropertyMetaDataSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_PropertyMetaDataSwig_obj = _exports_PropertyMetaDataSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: ComponentMetaDataSwig (_exports_ComponentMetaDataSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_ComponentMetaDataSwig_class_0 = SWIGV8_CreateClassTemplate("ComponentMetaDataSwig");
_exports_ComponentMetaDataSwig_class_0->SetCallHandler(_wrap_new_veto_ComponentMetaDataSwig);
_exports_ComponentMetaDataSwig_class_0->Inherit(_exports_ComponentMetaDataSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_ComponentMetaDataSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ComponentMetaDataSwig_obj = _exports_ComponentMetaDataSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_ComponentMetaDataSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_ComponentMetaDataSwig_obj = _exports_ComponentMetaDataSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_ComponentMetaDataSwig_obj = _exports_ComponentMetaDataSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: ProfileMetaDataSwig (_exports_ProfileMetaDataSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_ProfileMetaDataSwig_class_0 = SWIGV8_CreateClassTemplate("ProfileMetaDataSwig");
_exports_ProfileMetaDataSwig_class_0->SetCallHandler(_wrap_new_veto_ProfileMetaDataSwig);
_exports_ProfileMetaDataSwig_class_0->Inherit(_exports_ProfileMetaDataSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_ProfileMetaDataSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ProfileMetaDataSwig_obj = _exports_ProfileMetaDataSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_ProfileMetaDataSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_ProfileMetaDataSwig_obj = _exports_ProfileMetaDataSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_ProfileMetaDataSwig_obj = _exports_ProfileMetaDataSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: ValueMetaDataKeySwig (_exports_ValueMetaDataKeySwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_ValueMetaDataKeySwig_class_0 = SWIGV8_CreateClassTemplate("ValueMetaDataKeySwig");
_exports_ValueMetaDataKeySwig_class_0->SetCallHandler(_wrap_new_ValueMetaDataKeySwig);
_exports_ValueMetaDataKeySwig_class_0->Inherit(_exports_ValueMetaDataKeySwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_ValueMetaDataKeySwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ValueMetaDataKeySwig_obj = _exports_ValueMetaDataKeySwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_ValueMetaDataKeySwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_ValueMetaDataKeySwig_obj = _exports_ValueMetaDataKeySwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_ValueMetaDataKeySwig_obj = _exports_ValueMetaDataKeySwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: ValueMetaDataSwig (_exports_ValueMetaDataSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_ValueMetaDataSwig_class_0 = SWIGV8_CreateClassTemplate("ValueMetaDataSwig");
_exports_ValueMetaDataSwig_class_0->SetCallHandler(_wrap_new_veto_ValueMetaDataSwig);
_exports_ValueMetaDataSwig_class_0->Inherit(_exports_ValueMetaDataSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_ValueMetaDataSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ValueMetaDataSwig_obj = _exports_ValueMetaDataSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_ValueMetaDataSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_ValueMetaDataSwig_obj = _exports_ValueMetaDataSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_ValueMetaDataSwig_obj = _exports_ValueMetaDataSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: ComponentMetaDataCollectionSwig (_exports_ComponentMetaDataCollectionSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_ComponentMetaDataCollectionSwig_class_0 = SWIGV8_CreateClassTemplate("ComponentMetaDataCollectionSwig");
_exports_ComponentMetaDataCollectionSwig_class_0->SetCallHandler(_wrap_new_veto_ComponentMetaDataCollectionSwig);
_exports_ComponentMetaDataCollectionSwig_class_0->Inherit(_exports_ComponentMetaDataCollectionSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_ComponentMetaDataCollectionSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ComponentMetaDataCollectionSwig_obj = _exports_ComponentMetaDataCollectionSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_ComponentMetaDataCollectionSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_ComponentMetaDataCollectionSwig_obj = _exports_ComponentMetaDataCollectionSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_ComponentMetaDataCollectionSwig_obj = _exports_ComponentMetaDataCollectionSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: PropertyMetaDataCollectionSwig (_exports_PropertyMetaDataCollectionSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_PropertyMetaDataCollectionSwig_class_0 = SWIGV8_CreateClassTemplate("PropertyMetaDataCollectionSwig");
_exports_PropertyMetaDataCollectionSwig_class_0->SetCallHandler(_wrap_new_veto_PropertyMetaDataCollectionSwig);
_exports_PropertyMetaDataCollectionSwig_class_0->Inherit(_exports_PropertyMetaDataCollectionSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_PropertyMetaDataCollectionSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PropertyMetaDataCollectionSwig_obj = _exports_PropertyMetaDataCollectionSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_PropertyMetaDataCollectionSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_PropertyMetaDataCollectionSwig_obj = _exports_PropertyMetaDataCollectionSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_PropertyMetaDataCollectionSwig_obj = _exports_PropertyMetaDataCollectionSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: ProfileMetaDataCollectionSwig (_exports_ProfileMetaDataCollectionSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_ProfileMetaDataCollectionSwig_class_0 = SWIGV8_CreateClassTemplate("ProfileMetaDataCollectionSwig");
_exports_ProfileMetaDataCollectionSwig_class_0->SetCallHandler(_wrap_new_veto_ProfileMetaDataCollectionSwig);
_exports_ProfileMetaDataCollectionSwig_class_0->Inherit(_exports_ProfileMetaDataCollectionSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_ProfileMetaDataCollectionSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ProfileMetaDataCollectionSwig_obj = _exports_ProfileMetaDataCollectionSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_ProfileMetaDataCollectionSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_ProfileMetaDataCollectionSwig_obj = _exports_ProfileMetaDataCollectionSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_ProfileMetaDataCollectionSwig_obj = _exports_ProfileMetaDataCollectionSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: ValueMetaDataCollectionSwig (_exports_ValueMetaDataCollectionSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_ValueMetaDataCollectionSwig_class_0 = SWIGV8_CreateClassTemplate("ValueMetaDataCollectionSwig");
_exports_ValueMetaDataCollectionSwig_class_0->SetCallHandler(_wrap_new_veto_ValueMetaDataCollectionSwig);
_exports_ValueMetaDataCollectionSwig_class_0->Inherit(_exports_ValueMetaDataCollectionSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_ValueMetaDataCollectionSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ValueMetaDataCollectionSwig_obj = _exports_ValueMetaDataCollectionSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_ValueMetaDataCollectionSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_ValueMetaDataCollectionSwig_obj = _exports_ValueMetaDataCollectionSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_ValueMetaDataCollectionSwig_obj = _exports_ValueMetaDataCollectionSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: MetaDataSwig (_exports_MetaDataSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_MetaDataSwig_class_0 = SWIGV8_CreateClassTemplate("MetaDataSwig");
_exports_MetaDataSwig_class_0->SetCallHandler(_wrap_new_veto_MetaDataSwig);
_exports_MetaDataSwig_class_0->Inherit(_exports_MetaDataSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_MetaDataSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_MetaDataSwig_obj = _exports_MetaDataSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_MetaDataSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_MetaDataSwig_obj = _exports_MetaDataSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_MetaDataSwig_obj = _exports_MetaDataSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: EngineBaseSwig (_exports_EngineBaseSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_EngineBaseSwig_class_0 = SWIGV8_CreateClassTemplate("EngineBaseSwig");
_exports_EngineBaseSwig_class_0->SetCallHandler(_wrap_new_veto_EngineBaseSwig);
_exports_EngineBaseSwig_class_0->Inherit(_exports_EngineBaseSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_EngineBaseSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_EngineBaseSwig_obj = _exports_EngineBaseSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_EngineBaseSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_EngineBaseSwig_obj = _exports_EngineBaseSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_EngineBaseSwig_obj = _exports_EngineBaseSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: ConfigBaseSwig (_exports_ConfigBaseSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_ConfigBaseSwig_class_0 = SWIGV8_CreateClassTemplate("ConfigBaseSwig");
_exports_ConfigBaseSwig_class_0->SetCallHandler(_wrap_new_veto_ConfigBaseSwig);
_exports_ConfigBaseSwig_class_0->Inherit(_exports_ConfigBaseSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_ConfigBaseSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ConfigBaseSwig_obj = _exports_ConfigBaseSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_ConfigBaseSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_ConfigBaseSwig_obj = _exports_ConfigBaseSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_ConfigBaseSwig_obj = _exports_ConfigBaseSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: ConfigDeviceDetectionSwig (_exports_ConfigDeviceDetectionSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_ConfigDeviceDetectionSwig_class_0 = SWIGV8_CreateClassTemplate("ConfigDeviceDetectionSwig");
_exports_ConfigDeviceDetectionSwig_class_0->SetCallHandler(_wrap_new_veto_ConfigDeviceDetectionSwig);
_exports_ConfigDeviceDetectionSwig_class_0->Inherit(_exports_ConfigDeviceDetectionSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_ConfigDeviceDetectionSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ConfigDeviceDetectionSwig_obj = _exports_ConfigDeviceDetectionSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_ConfigDeviceDetectionSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_ConfigDeviceDetectionSwig_obj = _exports_ConfigDeviceDetectionSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_ConfigDeviceDetectionSwig_obj = _exports_ConfigDeviceDetectionSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: EvidenceBaseSwig (_exports_EvidenceBaseSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_EvidenceBaseSwig_class_0 = SWIGV8_CreateClassTemplate("EvidenceBaseSwig");
_exports_EvidenceBaseSwig_class_0->SetCallHandler(_wrap_new_EvidenceBaseSwig);
_exports_EvidenceBaseSwig_class_0->Inherit(_exports_EvidenceBaseSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_EvidenceBaseSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_EvidenceBaseSwig_obj = _exports_EvidenceBaseSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_EvidenceBaseSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_EvidenceBaseSwig_obj = _exports_EvidenceBaseSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_EvidenceBaseSwig_obj = _exports_EvidenceBaseSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: EvidenceDeviceDetectionSwig (_exports_EvidenceDeviceDetectionSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_EvidenceDeviceDetectionSwig_class_0 = SWIGV8_CreateClassTemplate("EvidenceDeviceDetectionSwig");
_exports_EvidenceDeviceDetectionSwig_class_0->SetCallHandler(_wrap_new_EvidenceDeviceDetectionSwig);
_exports_EvidenceDeviceDetectionSwig_class_0->Inherit(_exports_EvidenceDeviceDetectionSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_EvidenceDeviceDetectionSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_EvidenceDeviceDetectionSwig_obj = _exports_EvidenceDeviceDetectionSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_EvidenceDeviceDetectionSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_EvidenceDeviceDetectionSwig_obj = _exports_EvidenceDeviceDetectionSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_EvidenceDeviceDetectionSwig_obj = _exports_EvidenceDeviceDetectionSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: EngineDeviceDetectionSwig (_exports_EngineDeviceDetectionSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_EngineDeviceDetectionSwig_class_0 = SWIGV8_CreateClassTemplate("EngineDeviceDetectionSwig");
_exports_EngineDeviceDetectionSwig_class_0->SetCallHandler(_wrap_new_veto_EngineDeviceDetectionSwig);
_exports_EngineDeviceDetectionSwig_class_0->Inherit(_exports_EngineDeviceDetectionSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_EngineDeviceDetectionSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_EngineDeviceDetectionSwig_obj = _exports_EngineDeviceDetectionSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_EngineDeviceDetectionSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_EngineDeviceDetectionSwig_obj = _exports_EngineDeviceDetectionSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_EngineDeviceDetectionSwig_obj = _exports_EngineDeviceDetectionSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: ResultsDeviceDetectionSwig (_exports_ResultsDeviceDetectionSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_ResultsDeviceDetectionSwig_class_0 = SWIGV8_CreateClassTemplate("ResultsDeviceDetectionSwig");
_exports_ResultsDeviceDetectionSwig_class_0->SetCallHandler(_wrap_new_veto_ResultsDeviceDetectionSwig);
_exports_ResultsDeviceDetectionSwig_class_0->Inherit(_exports_ResultsDeviceDetectionSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_ResultsDeviceDetectionSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ResultsDeviceDetectionSwig_obj = _exports_ResultsDeviceDetectionSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_ResultsDeviceDetectionSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_ResultsDeviceDetectionSwig_obj = _exports_ResultsDeviceDetectionSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_ResultsDeviceDetectionSwig_obj = _exports_ResultsDeviceDetectionSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: ResultsHashSwig (_exports_ResultsHashSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_ResultsHashSwig_class_0 = SWIGV8_CreateClassTemplate("ResultsHashSwig");
_exports_ResultsHashSwig_class_0->SetCallHandler(_wrap_new_veto_ResultsHashSwig);
_exports_ResultsHashSwig_class_0->Inherit(_exports_ResultsHashSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_ResultsHashSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ResultsHashSwig_obj = _exports_ResultsHashSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_ResultsHashSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_ResultsHashSwig_obj = _exports_ResultsHashSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_ResultsHashSwig_obj = _exports_ResultsHashSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: CollectionConfigSwig (_exports_CollectionConfigSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_CollectionConfigSwig_class_0 = SWIGV8_CreateClassTemplate("CollectionConfigSwig");
_exports_CollectionConfigSwig_class_0->SetCallHandler(_wrap_new_CollectionConfigSwig);
_exports_CollectionConfigSwig_class_0->Inherit(_exports_CollectionConfigSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_CollectionConfigSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_CollectionConfigSwig_obj = _exports_CollectionConfigSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_CollectionConfigSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_CollectionConfigSwig_obj = _exports_CollectionConfigSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_CollectionConfigSwig_obj = _exports_CollectionConfigSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: ConfigHashSwig (_exports_ConfigHashSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_ConfigHashSwig_class_0 = SWIGV8_CreateClassTemplate("ConfigHashSwig");
_exports_ConfigHashSwig_class_0->SetCallHandler(_wrap_new_ConfigHashSwig);
_exports_ConfigHashSwig_class_0->Inherit(_exports_ConfigHashSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_ConfigHashSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ConfigHashSwig_obj = _exports_ConfigHashSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_ConfigHashSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_ConfigHashSwig_obj = _exports_ConfigHashSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_ConfigHashSwig_obj = _exports_ConfigHashSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif
/* Class: EngineHashSwig (_exports_EngineHashSwig) */
SWIGV8_FUNCTION_TEMPLATE _exports_EngineHashSwig_class_0 = SWIGV8_CreateClassTemplate("EngineHashSwig");
_exports_EngineHashSwig_class_0->SetCallHandler(_wrap_new_EngineHashSwig);
_exports_EngineHashSwig_class_0->Inherit(_exports_EngineHashSwig_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_EngineHashSwig_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_EngineHashSwig_obj = _exports_EngineHashSwig_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0705)
_exports_EngineHashSwig_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_EngineHashSwig_obj = _exports_EngineHashSwig_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_EngineHashSwig_obj = _exports_EngineHashSwig_class_0->GetFunction(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked();
#endif


  /* add static class functions and variables */
  SWIGV8_AddStaticVariable(_exports_EngineDeviceDetectionSwig_obj, "defaultElementDataKey", _wrap_EngineDeviceDetectionSwig_defaultElementDataKey_get, _wrap_EngineDeviceDetectionSwig_defaultElementDataKey_set);


  /* register classes */
  #if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("MapStringStringSwig"), _exports_MapStringStringSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("MapStringStringSwig"), _exports_MapStringStringSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("VectorStringSwig"), _exports_VectorStringSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("VectorStringSwig"), _exports_VectorStringSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("RequiredPropertiesConfigSwig"), _exports_RequiredPropertiesConfigSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("RequiredPropertiesConfigSwig"), _exports_RequiredPropertiesConfigSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("StringValueSwig"), _exports_StringValueSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("StringValueSwig"), _exports_StringValueSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("BoolValueSwig"), _exports_BoolValueSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("BoolValueSwig"), _exports_BoolValueSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("IntegerValueSwig"), _exports_IntegerValueSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("IntegerValueSwig"), _exports_IntegerValueSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("VectorStringValuesSwig"), _exports_VectorStringValuesSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("VectorStringValuesSwig"), _exports_VectorStringValuesSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("DoubleValueSwig"), _exports_DoubleValueSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("DoubleValueSwig"), _exports_DoubleValueSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("ResultsBaseSwig"), _exports_ResultsBaseSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("ResultsBaseSwig"), _exports_ResultsBaseSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("Date"), _exports_Date_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("Date"), _exports_Date_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("PropertyMetaDataSwig"), _exports_PropertyMetaDataSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("PropertyMetaDataSwig"), _exports_PropertyMetaDataSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("ComponentMetaDataSwig"), _exports_ComponentMetaDataSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("ComponentMetaDataSwig"), _exports_ComponentMetaDataSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("ProfileMetaDataSwig"), _exports_ProfileMetaDataSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("ProfileMetaDataSwig"), _exports_ProfileMetaDataSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("ValueMetaDataKeySwig"), _exports_ValueMetaDataKeySwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("ValueMetaDataKeySwig"), _exports_ValueMetaDataKeySwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("ValueMetaDataSwig"), _exports_ValueMetaDataSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("ValueMetaDataSwig"), _exports_ValueMetaDataSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("ComponentMetaDataCollectionSwig"), _exports_ComponentMetaDataCollectionSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("ComponentMetaDataCollectionSwig"), _exports_ComponentMetaDataCollectionSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("PropertyMetaDataCollectionSwig"), _exports_PropertyMetaDataCollectionSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("PropertyMetaDataCollectionSwig"), _exports_PropertyMetaDataCollectionSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("ProfileMetaDataCollectionSwig"), _exports_ProfileMetaDataCollectionSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("ProfileMetaDataCollectionSwig"), _exports_ProfileMetaDataCollectionSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("ValueMetaDataCollectionSwig"), _exports_ValueMetaDataCollectionSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("ValueMetaDataCollectionSwig"), _exports_ValueMetaDataCollectionSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("MetaDataSwig"), _exports_MetaDataSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("MetaDataSwig"), _exports_MetaDataSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("EngineBaseSwig"), _exports_EngineBaseSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("EngineBaseSwig"), _exports_EngineBaseSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("ConfigBaseSwig"), _exports_ConfigBaseSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("ConfigBaseSwig"), _exports_ConfigBaseSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("ConfigDeviceDetectionSwig"), _exports_ConfigDeviceDetectionSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("ConfigDeviceDetectionSwig"), _exports_ConfigDeviceDetectionSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("EvidenceBaseSwig"), _exports_EvidenceBaseSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("EvidenceBaseSwig"), _exports_EvidenceBaseSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("EvidenceDeviceDetectionSwig"), _exports_EvidenceDeviceDetectionSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("EvidenceDeviceDetectionSwig"), _exports_EvidenceDeviceDetectionSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("EngineDeviceDetectionSwig"), _exports_EngineDeviceDetectionSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("EngineDeviceDetectionSwig"), _exports_EngineDeviceDetectionSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("ResultsDeviceDetectionSwig"), _exports_ResultsDeviceDetectionSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("ResultsDeviceDetectionSwig"), _exports_ResultsDeviceDetectionSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("ResultsHashSwig"), _exports_ResultsHashSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("ResultsHashSwig"), _exports_ResultsHashSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("CollectionConfigSwig"), _exports_CollectionConfigSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("CollectionConfigSwig"), _exports_CollectionConfigSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("ConfigHashSwig"), _exports_ConfigHashSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("ConfigHashSwig"), _exports_ConfigHashSwig_obj);
#endif
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
exports_obj->Set(SWIGV8_SYMBOL_NEW("EngineHashSwig"), _exports_EngineHashSwig_obj);
#else
exports_obj->Set(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW("EngineHashSwig"), _exports_EngineHashSwig_obj);
#endif


  /* create and register namespace objects */
  
}

#if defined(BUILDING_NODE_EXTENSION)
NODE_MODULE(DeviceDetectionHashEngineModule, DeviceDetectionHashEngineModule_initialize)
#endif
