trigger:
  - master
  - develop
  - release/*  
    
pool:
  vmImage: 'ubuntu-18.04'

variables: 
  - group: PackageFeedAccessToken
    # Access token for the git repository. Used by the git tag task.
  - name: system_accesstoken
    value: $(System.AccessToken)

steps:
# The lines below are needed to allow the pipeline access to the
# OAuth access token that controls write access to the git repository. 
# (Required for GitTag task)
- checkout: self
  lfs: true
  submodules: recursive
  persistCredentials: true

- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: 'Pipeline'
    pipeline: '127'
    runId: '$(binariesRunId)'
    path: '$(System.ArtifactsDirectory)'
  displayName: 'Download binaries'
  
- script: |
    ls $(System.ArtifactsDirectory)
    mkdir $(Build.SourcesDirectory)/fiftyone.devicedetection.onpremise/build
    mv $(System.ArtifactsDirectory)/**/*.node $(Build.SourcesDirectory)/fiftyone.devicedetection.onpremise/build
    ls $(Build.SourcesDirectory)/fiftyone.devicedetection.onpremise/build
  displayName: 'Move binaries'

- task: gittools.gitversion.gitversion-task.GitVersion@5
  displayName: 'Determine Version Number'
  # Give this task a name so we can use the variables it sets later. 
  name: GitVersion
  inputs:
    preferBundledVersion: false

# All modules that reference other device detection modules in this repository
# have package.json files where the dependency is defined relative to 
# the local file system.
# We need to change these dependencies to 'normal' remote NPM references 
# before creating the packages.
- script: |
    ls **/remote_package.json

    rm -f fiftyone.devicedetection/package.json
    rm -f fiftyone.devicedetection.cloud/package.json
    rm -f fiftyone.devicedetection.onpremise/package.json

    mv fiftyone.devicedetection/remote_package.json fiftyone.devicedetection/package.json
    mv fiftyone.devicedetection.cloud/remote_package.json fiftyone.devicedetection.cloud/package.json
    mv fiftyone.devicedetection.onpremise/remote_package.json fiftyone.devicedetection.onpremise/package.json
  displayName: 'Switch to package.json that has remote dependencies'

# Set version number.
- task: Npm@1
  displayName: 'npm version fiftyone.devicedetection'
  inputs:
    command: custom
    workingDir: fiftyone.devicedetection
    verbose: true
    customCommand: version $(GitVersion.SemVer)    
  continueOnError: true
  condition: succeededOrFailed()

- task: Npm@1
  displayName: 'npm version fiftyone.devicedetection.cloud'
  inputs:
    command: custom
    workingDir: fiftyone.devicedetection.cloud
    verbose: true
    customCommand: version $(GitVersion.SemVer)    
  continueOnError: true
  condition: succeededOrFailed()

- task: Npm@1
  displayName: 'npm version fiftyone.devicedetection.onpremise'
  inputs:
    command: custom
    workingDir: fiftyone.devicedetection.onpremise
    verbose: true
    customCommand: version $(GitVersion.SemVer)    
  continueOnError: true
  condition: succeededOrFailed()

- task: Npm@1
  displayName: 'npm version fiftyone.devicedetection.shared'
  inputs:
    command: custom
    workingDir: fiftyone.devicedetection.shared
    verbose: true
    customCommand: version $(GitVersion.SemVer)    
  continueOnError: true
  condition: succeededOrFailed()

# Create packages
- script: |
    cd fiftyone.devicedetection
    npm pack
    cd ../fiftyone.devicedetection.cloud
    npm pack
    cd ../fiftyone.devicedetection.onpremise
    npm pack
    cd ../fiftyone.devicedetection.shared
    npm pack
  displayName: 'Create npm package for later release'
  condition: succeededOrFailed()

- script: |
    ls **/*.tgz
  displayName: 'List tgz files'
  condition: succeededOrFailed()

# Copy artifacts contents.
- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: '**/*.tgz' 
    targetFolder: $(Build.ArtifactStagingDirectory)/npm
  displayName: 'Copy tgz files'
  condition: succeededOrFailed()

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: '**/package.json' 
    targetFolder: $(Build.ArtifactStagingDirectory)/npm
  displayName: 'Copy package.json files'
  condition: succeededOrFailed()

- script: |
    ls $(Build.ArtifactStagingDirectory)/**/*
  displayName: 'List artifact staging contents'
  condition: succeededOrFailed()

# Add a tag to the git repository with the version number of
# the package that has just been published
- task: ATP.ATP-GitTag.GitTag.GitTag@5
  displayName: 'Tag Repo With Version Number'
  inputs:
    tagUser: 'Azure DevOps'
    tagEmail: 'CIUser@51Degrees.com'
# Only create the tag if we also published a package as defined in 
# the previous task.
  condition: succeeded()

# Publish artifacts to DevOps
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/npm'
    artifactName: npm
  displayName: 'Publish npm artifact'
  condition: succeededOrFailed()
