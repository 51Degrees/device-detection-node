trigger:
  - master
  - develop
  - release/*  

# Don't trigger for a pull request
pr: none
        
resources:
  repositories:
    - repository: ciTemplates # Id of the repository used to reference to in this script
      type: git
      name: common-ci # Name of the actual repository

# Include shared variables
variables:
- template: shared-variables.yml@ciTemplates
- group: CIAutomation
# Access token for the git repository. Used by the git tag task.
- name: system_accesstoken
  value: $(System.AccessToken)
- name: createPackageRunTests
  value: 'Off'

stages:
- template: shared-build-and-test-platforms.yml
  parameters:
    publishBinaries: true
    windowsImage: $(windowsImage)
    linuxImage: $(linuxImage)
    macImage: $(macImage)
    msvsVer: ${{ variables.msvsVer }}
    winSDKVer: ${{ variables.winSDKVer }}
    runTests: variables['createPackageRunTests']

- stage: Publish
  dependsOn: [Windows,Linux,MacOS]

  jobs:
  - template: shared-git-version-job.yml@ciTemplates
    parameters:
      imageName: $(linuxImage)

  - job: Publish
    displayName: Publish Packages
    dependsOn: Versioning
    condition: and(succeeded(), ne(variables['CreatePackages'], 'Off'))

    pool:
      vmImage: $(linuxImage)

    variables: 
      - group: PackageFeedAccessToken
      - name: GitVersionSemVer
        value: $[ dependencies.Versioning.outputs['SetGitVersionVars.GitVersionSemVer'] ]

    steps:
    # The lines below are needed to allow the pipeline access to the
    # OAuth access token that controls write access to the git repository. 
    # (Required for GitTag task)
    - checkout: self
      lfs: true
      submodules: recursive
      persistCredentials: true

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'binaries'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download binaries'
  
    - script: |
        mkdir $(Build.SourcesDirectory)/fiftyone.devicedetection.onpremise/build
        if [ ! -d $(Build.SourcesDirectory)/fiftyone.devicedetection.onpremise/build ]; then
          echo "ERROR: Failed to create folder 'build'"
          exit 1
        fi
        
        mv $(System.ArtifactsDirectory)/binaries/*.node $(Build.SourcesDirectory)/fiftyone.devicedetection.onpremise/build
      displayName: 'Move binaries'
      failOnStderr: true

    # All modules that reference other device detection modules in this repository
    # have package.json files where the dependency is defined relative to 
    # the local file system.
    # We need to change these dependencies to 'normal' remote NPM references 
    # before creating the packages.
    - script: |
        rm -f fiftyone.devicedetection/package.json
        rm -f fiftyone.devicedetection.shared/package.json
        rm -f fiftyone.devicedetection.cloud/package.json
        rm -f fiftyone.devicedetection.onpremise/package.json
        if [ -f fiftyone.devicedetection/package.json ] && \
           [ -f fiftyone.devicedetection.shared/package.json ] && \
           [ -f fiftyone.devicedetection.cloud/package.json] && \
           [ -f fiftyone.devicedetection.onpremise/package.json ]; then
          echo "ERROR: Failed to remove package.json files."
          exit 1
        fi
        
        mv fiftyone.devicedetection/remote_package.json fiftyone.devicedetection/package.json
        mv fiftyone.devicedetection.shared/remote_package.json fiftyone.devicedetection.shared/package.json
        mv fiftyone.devicedetection.cloud/remote_package.json fiftyone.devicedetection.cloud/package.json
        mv fiftyone.devicedetection.onpremise/remote_package.json fiftyone.devicedetection.onpremise/package.json
        if [ ! -f fiftyone.devicedetection/package.json ] && \
           [ ! -f fiftyone.devicedetection.shared/package.json ] && \
           [ ! -f fiftyone.devicedetection.cloud/package.json] && \
           [ ! -f fiftyone.devicedetection.onpremise/package.json ]; then
          echo "ERROR: Failed to update package.json files."
          exit 1
        fi
      displayName: 'Switch to package.json that has remote dependencies'
      failOnStderr: true

    # Set version number.
    - task: Npm@1
      displayName: 'npm version fiftyone.devicedetection'
      inputs:
        command: custom
        workingDir: fiftyone.devicedetection
        verbose: true
        customCommand: version $(GitVersionSemVer)    
      continueOnError: true
      condition: succeededOrFailed()

    - task: Npm@1
      displayName: 'npm version fiftyone.devicedetection.cloud'
      inputs:
        command: custom
        workingDir: fiftyone.devicedetection.cloud
        verbose: true
        customCommand: version $(GitVersionSemVer)    
      continueOnError: true
      condition: succeededOrFailed()

    - task: Npm@1
      displayName: 'npm version fiftyone.devicedetection.onpremise'
      inputs:
        command: custom
        workingDir: fiftyone.devicedetection.onpremise
        verbose: true
        customCommand: version $(GitVersionSemVer)    
      continueOnError: true
      condition: succeededOrFailed()

    - task: Npm@1
      displayName: 'npm version fiftyone.devicedetection.shared'
      inputs:
        command: custom
        workingDir: fiftyone.devicedetection.shared
        verbose: true
        customCommand: version $(GitVersionSemVer)    
      continueOnError: true
      condition: succeededOrFailed()

    # Create packages
    - script: |
        cd fiftyone.devicedetection
        npm pack
        if [ $? -ne 0]; then
          echo "Failed to pack fiftyone.devicedetection."
          exit 1
        fi

        cd ../fiftyone.devicedetection.cloud
        npm pack
        if [ $? -ne 0]; then
          echo "Failed to pack fiftyone.devicedetection.cloud."
          exit 1
        fi

        cd ../fiftyone.devicedetection.onpremise
        npm pack
        if [ $? -ne 0]; then
          echo "Failed to pack fiftyone.devicedetection.onpremise."
          exit 1
        fi

        cd ../fiftyone.devicedetection.shared
        npm pack
        if [ $? -ne 0]; then
          echo "Failed to pack fiftyone.devicedetection.shared."
          exit 1
        fi
      displayName: 'Create npm package for later release'
      condition: succeededOrFailed()

    # Copy artifacts contents.
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)'
        contents: '**/*.tgz' 
        targetFolder: $(Build.ArtifactStagingDirectory)/npm
      displayName: 'Copy tgz files'
      condition: succeededOrFailed()

    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)'
        contents: '**/package.json' 
        targetFolder: $(Build.ArtifactStagingDirectory)/npm
      displayName: 'Copy package.json files'
      condition: succeededOrFailed()

    - script: |
        ls -r $(Build.ArtifactStagingDirectory)/npm/fiftyone.devicedetection/*fiftyone.devicedetection*.tgz
        export rc1=$?
        ls -r $(Build.ArtifactStagingDirectory)/npm/fiftyone.devicedetection.cloud/*fiftyone.devicedetection.cloud*.tgz
        export rc2=$?
        ls -r $(Build.ArtifactStagingDirectory)/npm/fiftyone.devicedetection.onpremise/*fiftyone.devicedetection.onpremise*.tgz
        export rc3=$?
        ls -r $(Build.ArtifactStagingDirectory)/npm/fiftyone.devicedetection.onpremise/*fiftyone.devicedetection.onpremise*.tgz
        export rc4=$?
        if [ $rc1 -ne 0 ] || \
           [ $rc2 -ne 0 ] || \
           [ $rc3 -ne 0 ] || \
           [ $rc4 -ne 0 ]; then
           echo "ERROR: Could not find all packaged modules."
           exit 1
        fi
      displayName: 'List artifact staging contents'
      condition: succeededOrFailed()
      failOnStderr: true

    # Publish artifacts to DevOps
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/npm'
        artifactName: npm
      displayName: 'Publish npm artifact'
      condition: succeededOrFailed()

  - template: shared-git-tag-job.yml@ciTemplates
    parameters:
      imageName: $(linuxImage)
      jobDependencies: [Versioning,Publish]